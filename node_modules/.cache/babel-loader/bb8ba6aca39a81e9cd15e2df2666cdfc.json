{"ast":null,"code":"import _regeneratorRuntime from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _slicedToArray from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { WalletNotConnectedError, WalletNotReadyError } from '@solana/wallet-adapter-base';\nimport React, { useCallback, useEffect, useMemo, useRef, useState } from 'react';\nimport { WalletNotSelectedError } from './errors';\nimport { useLocalStorage } from './useLocalStorage';\nimport { WalletContext } from './useWallet';\nvar initialState = {\n  wallet: null,\n  adapter: null,\n  ready: false,\n  publicKey: null,\n  connected: false\n};\nexport var WalletProvider = function WalletProvider(_ref) {\n  var children = _ref.children,\n      wallets = _ref.wallets,\n      _ref$autoConnect = _ref.autoConnect,\n      autoConnect = _ref$autoConnect === void 0 ? false : _ref$autoConnect,\n      onError = _ref.onError,\n      _ref$localStorageKey = _ref.localStorageKey,\n      localStorageKey = _ref$localStorageKey === void 0 ? 'walletName' : _ref$localStorageKey;\n\n  var _useLocalStorage = useLocalStorage(localStorageKey, null),\n      _useLocalStorage2 = _slicedToArray(_useLocalStorage, 2),\n      name = _useLocalStorage2[0],\n      setName = _useLocalStorage2[1];\n\n  var _useState = useState(initialState),\n      _useState2 = _slicedToArray(_useState, 2),\n      _useState2$ = _useState2[0],\n      wallet = _useState2$.wallet,\n      adapter = _useState2$.adapter,\n      ready = _useState2$.ready,\n      publicKey = _useState2$.publicKey,\n      connected = _useState2$.connected,\n      setState = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      connecting = _useState4[0],\n      setConnecting = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      disconnecting = _useState6[0],\n      setDisconnecting = _useState6[1];\n\n  var isConnecting = useRef(false);\n  var isDisconnecting = useRef(false);\n  var isUnloading = useRef(false); // Map of wallet names to wallets\n\n  var walletsByName = useMemo(function () {\n    return wallets.reduce(function (walletsByName, wallet) {\n      walletsByName[wallet.name] = wallet;\n      return walletsByName;\n    }, {});\n  }, [wallets]); // When the selected wallet changes, initialize the state\n\n  useEffect(function () {\n    var wallet = name && walletsByName[name] || null;\n    var adapter = wallet && wallet.adapter;\n\n    if (adapter) {\n      var _publicKey = adapter.publicKey,\n          _connected = adapter.connected;\n      setState({\n        wallet: wallet,\n        adapter: adapter,\n        connected: _connected,\n        publicKey: _publicKey,\n        ready: false\n      }); // Asynchronously update the ready state\n\n      var waiting = name;\n\n      (function () {\n        return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n          var ready;\n          return _regeneratorRuntime.wrap(function _callee$(_context) {\n            while (1) {\n              switch (_context.prev = _context.next) {\n                case 0:\n                  _context.next = 2;\n                  return adapter.ready();\n\n                case 2:\n                  ready = _context.sent;\n\n                  // If the selected wallet hasn't changed while waiting, update the ready state\n                  if (name === waiting) {\n                    setState(function (state) {\n                      return Object.assign(Object.assign({}, state), {\n                        ready: ready\n                      });\n                    });\n                  }\n\n                case 4:\n                case \"end\":\n                  return _context.stop();\n              }\n            }\n          }, _callee);\n        }));\n      })();\n    } else {\n      setState(initialState);\n    }\n  }, [name, walletsByName, setState]); // If autoConnect is enabled, try to connect when the adapter changes and is ready\n\n  useEffect(function () {\n    if (isConnecting.current || connecting || connected || !autoConnect || !adapter || !ready) return;\n\n    (function () {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                isConnecting.current = true;\n                setConnecting(true);\n                _context2.prev = 2;\n                _context2.next = 5;\n                return adapter.connect();\n\n              case 5:\n                _context2.next = 10;\n                break;\n\n              case 7:\n                _context2.prev = 7;\n                _context2.t0 = _context2[\"catch\"](2);\n                // Clear the selected wallet\n                setName(null); // Don't throw error, but handleError will still be called\n\n              case 10:\n                _context2.prev = 10;\n                setConnecting(false);\n                isConnecting.current = false;\n                return _context2.finish(10);\n\n              case 14:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, null, [[2, 7, 10, 14]]);\n      }));\n    })();\n  }, [isConnecting, connecting, connected, autoConnect, adapter, ready, setConnecting, setName]); // If the window is closing or reloading, ignore disconnect and error events from the adapter\n\n  useEffect(function () {\n    function listener() {\n      isUnloading.current = true;\n    }\n\n    window.addEventListener('beforeunload', listener);\n    return function () {\n      return window.removeEventListener('beforeunload', listener);\n    };\n  }, [isUnloading]); // Select a wallet by name\n\n  var select = useCallback(function (walletName) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              if (!(name === walletName)) {\n                _context3.next = 2;\n                break;\n              }\n\n              return _context3.abrupt(\"return\");\n\n            case 2:\n              if (!adapter) {\n                _context3.next = 5;\n                break;\n              }\n\n              _context3.next = 5;\n              return adapter.disconnect();\n\n            case 5:\n              setName(walletName);\n\n            case 6:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, _callee3);\n    }));\n  }, [name, adapter, setName]); // Handle the adapter's connect event\n\n  var handleConnect = useCallback(function () {\n    if (!adapter) return;\n    var connected = adapter.connected,\n        publicKey = adapter.publicKey;\n    setState(function (state) {\n      return Object.assign(Object.assign({}, state), {\n        connected: connected,\n        publicKey: publicKey\n      });\n    });\n  }, [adapter, setState]); // Handle the adapter's disconnect event\n\n  var handleDisconnect = useCallback(function () {\n    // Clear the selected wallet unless the window is unloading\n    if (!isUnloading.current) setName(null);\n  }, [isUnloading, setName]); // Handle the adapter's error event, and local errors\n\n  var handleError = useCallback(function (error) {\n    // Call onError unless the window is unloading\n    if (!isUnloading.current) {\n      (onError || console.error)(error);\n    }\n\n    return error;\n  }, [isUnloading, onError]); // Connect the adapter to the wallet\n\n  var connect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n      return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              if (!(isConnecting.current || connecting || disconnecting || connected)) {\n                _context4.next = 2;\n                break;\n              }\n\n              return _context4.abrupt(\"return\");\n\n            case 2:\n              if (!(!wallet || !adapter)) {\n                _context4.next = 4;\n                break;\n              }\n\n              throw handleError(new WalletNotSelectedError());\n\n            case 4:\n              if (ready) {\n                _context4.next = 8;\n                break;\n              }\n\n              // Clear the selected wallet\n              setName(null);\n\n              if (typeof window !== 'undefined') {\n                window.open(wallet.url, '_blank');\n              }\n\n              throw handleError(new WalletNotReadyError());\n\n            case 8:\n              isConnecting.current = true;\n              setConnecting(true);\n              _context4.prev = 10;\n              _context4.next = 13;\n              return adapter.connect();\n\n            case 13:\n              _context4.next = 19;\n              break;\n\n            case 15:\n              _context4.prev = 15;\n              _context4.t0 = _context4[\"catch\"](10);\n              // Clear the selected wallet\n              setName(null); // Rethrow the error, and handleError will also be called\n\n              throw _context4.t0;\n\n            case 19:\n              _context4.prev = 19;\n              setConnecting(false);\n              isConnecting.current = false;\n              return _context4.finish(19);\n\n            case 23:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, _callee4, null, [[10, 15, 19, 23]]);\n    }));\n  }, [isConnecting, connecting, disconnecting, connected, wallet, adapter, handleError, ready, setConnecting, setName]); // Disconnect the adapter from the wallet\n\n  var disconnect = useCallback(function () {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n      return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              if (!(isDisconnecting.current || disconnecting)) {\n                _context5.next = 2;\n                break;\n              }\n\n              return _context5.abrupt(\"return\");\n\n            case 2:\n              if (adapter) {\n                _context5.next = 4;\n                break;\n              }\n\n              return _context5.abrupt(\"return\", setName(null));\n\n            case 4:\n              isDisconnecting.current = true;\n              setDisconnecting(true);\n              _context5.prev = 6;\n              _context5.next = 9;\n              return adapter.disconnect();\n\n            case 9:\n              _context5.next = 15;\n              break;\n\n            case 11:\n              _context5.prev = 11;\n              _context5.t0 = _context5[\"catch\"](6);\n              // Clear the selected wallet\n              setName(null); // Rethrow the error, and handleError will also be called\n\n              throw _context5.t0;\n\n            case 15:\n              _context5.prev = 15;\n              setDisconnecting(false);\n              isDisconnecting.current = false;\n              return _context5.finish(15);\n\n            case 19:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, _callee5, null, [[6, 11, 15, 19]]);\n    }));\n  }, [isDisconnecting, disconnecting, adapter, setDisconnecting, setName]); // Send a transaction using the provided connection\n\n  var sendTransaction = useCallback(function (transaction, connection, options) {\n    return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n      return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              if (adapter) {\n                _context6.next = 2;\n                break;\n              }\n\n              throw handleError(new WalletNotSelectedError());\n\n            case 2:\n              if (connected) {\n                _context6.next = 4;\n                break;\n              }\n\n              throw handleError(new WalletNotConnectedError());\n\n            case 4:\n              _context6.next = 6;\n              return adapter.sendTransaction(transaction, connection, options);\n\n            case 6:\n              return _context6.abrupt(\"return\", _context6.sent);\n\n            case 7:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, _callee6);\n    }));\n  }, [adapter, handleError, connected]); // Sign a transaction if the wallet supports it\n\n  var signTransaction = useMemo(function () {\n    return adapter && 'signTransaction' in adapter ? function (transaction) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                if (connected) {\n                  _context7.next = 2;\n                  break;\n                }\n\n                throw handleError(new WalletNotConnectedError());\n\n              case 2:\n                _context7.next = 4;\n                return adapter.signTransaction(transaction);\n\n              case 4:\n                return _context7.abrupt(\"return\", _context7.sent);\n\n              case 5:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7);\n      }));\n    } : undefined;\n  }, [adapter, handleError, connected]); // Sign multiple transactions if the wallet supports it\n\n  var signAllTransactions = useMemo(function () {\n    return adapter && 'signAllTransactions' in adapter ? function (transactions) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                if (connected) {\n                  _context8.next = 2;\n                  break;\n                }\n\n                throw handleError(new WalletNotConnectedError());\n\n              case 2:\n                _context8.next = 4;\n                return adapter.signAllTransactions(transactions);\n\n              case 4:\n                return _context8.abrupt(\"return\", _context8.sent);\n\n              case 5:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8);\n      }));\n    } : undefined;\n  }, [adapter, handleError, connected]); // Sign an arbitrary message if the wallet supports it\n\n  var signMessage = useMemo(function () {\n    return adapter && 'signMessage' in adapter ? function (message) {\n      return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n        return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n          while (1) {\n            switch (_context9.prev = _context9.next) {\n              case 0:\n                if (connected) {\n                  _context9.next = 2;\n                  break;\n                }\n\n                throw handleError(new WalletNotConnectedError());\n\n              case 2:\n                _context9.next = 4;\n                return adapter.signMessage(message);\n\n              case 4:\n                return _context9.abrupt(\"return\", _context9.sent);\n\n              case 5:\n              case \"end\":\n                return _context9.stop();\n            }\n          }\n        }, _callee9);\n      }));\n    } : undefined;\n  }, [adapter, handleError, connected]); // Setup and teardown event listeners when the adapter changes\n\n  useEffect(function () {\n    if (adapter) {\n      adapter.on('connect', handleConnect);\n      adapter.on('disconnect', handleDisconnect);\n      adapter.on('error', handleError);\n      return function () {\n        adapter.off('connect', handleConnect);\n        adapter.off('disconnect', handleDisconnect);\n        adapter.off('error', handleError);\n      };\n    }\n  }, [adapter, handleConnect, handleDisconnect, handleError]);\n  return React.createElement(WalletContext.Provider, {\n    value: {\n      wallets: wallets,\n      autoConnect: autoConnect,\n      wallet: wallet,\n      adapter: adapter,\n      publicKey: publicKey,\n      ready: ready,\n      connected: connected,\n      connecting: connecting,\n      disconnecting: disconnecting,\n      select: select,\n      connect: connect,\n      disconnect: disconnect,\n      sendTransaction: sendTransaction,\n      signTransaction: signTransaction,\n      signAllTransactions: signAllTransactions,\n      signMessage: signMessage\n    }\n  }, children);\n};","map":null,"metadata":{},"sourceType":"module"}