{"ast":null,"code":"import _classCallCheck from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\nimport _regeneratorRuntime from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport { Transaction } from '@solana/web3.js';\nimport { createLoggerMiddleware, COMMUNICATION_JRPC_METHODS, COMMUNICATION_NOTIFICATIONS, PROVIDER_JRPC_METHODS, PROVIDER_NOTIFICATIONS } from '@toruslabs/base-controllers';\nimport { setAPIKey } from '@toruslabs/http-helpers';\nimport { SafeEventEmitter, ObjectMultiplex, createStreamMiddleware, JRPCEngine, createIdRemapMiddleware, getRpcPromiseCallback, BasePostMessageStream } from '@toruslabs/openlogin-jrpc';\nimport { ethErrors, EthereumRpcError } from 'eth-rpc-errors';\nimport { isDuplexStream } from 'is-stream';\nimport pump from 'pump';\nimport loglevel from 'loglevel';\nimport dequal from 'fast-deep-equal';\n/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation.\r\n\r\nPermission to use, copy, modify, and/or distribute this software for any\r\npurpose with or without fee is hereby granted.\r\n\r\nTHE SOFTWARE IS PROVIDED \"AS IS\" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH\r\nREGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY\r\nAND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,\r\nINDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM\r\nLOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR\r\nOTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR\r\nPERFORMANCE OF THIS SOFTWARE.\r\n***************************************************************************** */\n\nfunction __awaiter(thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n}\n\nvar messages = {\n  errors: {\n    disconnected: function disconnected() {\n      return \"Torus: Lost connection to Torus.\";\n    },\n    permanentlyDisconnected: function permanentlyDisconnected() {\n      return \"Torus: Disconnected from iframe. Page reload required.\";\n    },\n    unsupportedSync: function unsupportedSync(method) {\n      return \"Torus: The Torus Ethereum provider does not support synchronous methods like \".concat(method, \" without a callback parameter.\");\n    },\n    invalidDuplexStream: function invalidDuplexStream() {\n      return \"Must provide a Node.js-style duplex stream.\";\n    },\n    invalidOptions: function invalidOptions(maxEventListeners) {\n      return \"Invalid options. Received: { maxEventListeners: \".concat(maxEventListeners, \"}\");\n    },\n    invalidRequestArgs: function invalidRequestArgs() {\n      return \"Expected a single, non-array, object argument.\";\n    },\n    invalidRequestMethod: function invalidRequestMethod() {\n      return \"'args.method' must be a non-empty string.\";\n    },\n    invalidRequestParams: function invalidRequestParams() {\n      return \"'args.params' must be an object or array if provided.\";\n    },\n    invalidLoggerObject: function invalidLoggerObject() {\n      return \"'args.logger' must be an object if provided.\";\n    },\n    invalidLoggerMethod: function invalidLoggerMethod(method) {\n      return \"'args.logger' must include required method '\".concat(method, \"'.\");\n    }\n  },\n  info: {\n    connected: function connected(chainId) {\n      return \"Torus: Connected to chain with ID \\\"\".concat(chainId, \"\\\".\");\n    }\n  },\n  warnings: {}\n};\nvar PAYMENT_PROVIDER = {\n  MOONPAY: \"moonpay\",\n  WYRE: \"wyre\",\n  RAMPNETWORK: \"rampnetwork\",\n  XANPOOL: \"xanpool\",\n  MERCURYO: \"mercuryo\",\n  TRANSAK: \"transak\"\n};\nvar TORUS_BUILD_ENV = {\n  PRODUCTION: \"production\",\n  DEVELOPMENT: \"development\",\n  TESTING: \"testing\"\n};\nvar BUTTON_POSITION = {\n  BOTTOM_LEFT: \"bottom-left\",\n  TOP_LEFT: \"top-left\",\n  BOTTOM_RIGHT: \"bottom-right\",\n  TOP_RIGHT: \"top-right\"\n};\nvar LOGIN_PROVIDER = {\n  GOOGLE: \"google\",\n  FACEBOOK: \"facebook\",\n  REDDIT: \"reddit\",\n  DISCORD: \"discord\",\n  TWITCH: \"twitch\",\n  APPLE: \"apple\",\n  LINE: \"line\",\n  GITHUB: \"github\",\n  KAKAO: \"kakao\",\n  LINKEDIN: \"linkedin\",\n  TWITTER: \"twitter\",\n  WEIBO: \"weibo\",\n  WECHAT: \"wechat\",\n  EMAIL_PASSWORDLESS: \"email_passwordless\"\n};\nvar translations = {\n  en: {\n    embed: {\n      continue: \"Continue\",\n      actionRequired: \"Authorization required\",\n      pendingAction: \"Click continue to proceed with your request in a popup\",\n      cookiesRequired: \"Cookies Required\",\n      enableCookies: \"Please enable cookies in your browser preferences to access Torus\",\n      clickHere: \"More Info\"\n    }\n  },\n  de: {\n    embed: {\n      continue: \"Fortsetzen\",\n      actionRequired: \"Autorisierung erforderlich\",\n      pendingAction: \"Klicken Sie in einem Popup auf Weiter, um mit Ihrer Anfrage fortzufahren\",\n      cookiesRequired: \"Cookies benötigt\",\n      enableCookies: \"Bitte aktivieren Sie Cookies in Ihren Browsereinstellungen, um auf Torus zuzugreifen\",\n      clickHere: \"Mehr Info\"\n    }\n  },\n  ja: {\n    embed: {\n      continue: \"継続する\",\n      actionRequired: \"認証が必要です\",\n      pendingAction: \"続行をクリックして、ポップアップでリクエストを続行します\",\n      cookiesRequired: \"必要なクッキー\",\n      enableCookies: \"Torusにアクセスするには、ブラウザの設定でCookieを有効にしてください。\",\n      clickHere: \"詳しくは\"\n    }\n  },\n  ko: {\n    embed: {\n      continue: \"계속하다\",\n      actionRequired: \"승인 필요\",\n      pendingAction: \"팝업에서 요청을 진행하려면 계속을 클릭하십시오.\",\n      cookiesRequired: \"쿠키 필요\",\n      enableCookies: \"브라우저 환경 설정에서 쿠키를 활성화하여 Torus에 액세스하십시오.\",\n      clickHere: \"더 많은 정보\"\n    }\n  },\n  zh: {\n    embed: {\n      continue: \"继续\",\n      actionRequired: \"需要授权\",\n      pendingAction: \"单击继续以在弹出窗口中继续您的请求\",\n      cookiesRequired: \"必填Cookie\",\n      enableCookies: \"请在您的浏览器首选项中启用cookie以访问Torus。\",\n      clickHere: \"更多信息\"\n    }\n  }\n};\nvar configuration = {\n  supportedVerifierList: [LOGIN_PROVIDER.GOOGLE, LOGIN_PROVIDER.REDDIT, LOGIN_PROVIDER.DISCORD],\n  api: \"https://api.tor.us\",\n  translations: translations,\n  prodTorusUrl: \"\",\n  localStorageKey: \"torus-\".concat(window.location.hostname)\n};\nvar log = loglevel.getLogger(\"solana-embed\"); // utility functions\n\n/**\n * json-rpc-engine middleware that logs RPC errors and and validates req.method.\n *\n * @param log - The logging API to use.\n * @returns  json-rpc-engine middleware function\n */\n\nfunction createErrorMiddleware() {\n  return function (req, res, next) {\n    // json-rpc-engine will terminate the request when it notices this error\n    if (typeof req.method !== \"string\" || !req.method) {\n      res.error = ethErrors.rpc.invalidRequest({\n        message: \"The request 'method' must be a non-empty string.\",\n        data: req\n      });\n    }\n\n    next(function (done) {\n      var error = res.error;\n\n      if (!error) {\n        return done();\n      }\n\n      log.error(\"Torus - RPC Error: \".concat(error.message), error);\n      return done();\n    });\n  };\n}\n/**\n * Logs a stream disconnection error. Emits an 'error' if given an\n * EventEmitter that has listeners for the 'error' event.\n *\n * @param log - The logging API to use.\n * @param remoteLabel - The label of the disconnected stream.\n * @param error - The associated error to log.\n * @param emitter - The logging API to use.\n */\n\n\nfunction logStreamDisconnectWarning(remoteLabel, error, emitter) {\n  var warningMsg = \"Torus: Lost connection to \\\"\".concat(remoteLabel, \"\\\".\");\n\n  if (error === null || error === void 0 ? void 0 : error.stack) {\n    warningMsg += \"\\n\".concat(error.stack);\n  }\n\n  log.warn(warningMsg);\n\n  if (emitter && emitter.listenerCount(\"error\") > 0) {\n    emitter.emit(\"error\", warningMsg);\n  }\n}\n\nvar getWindowId = function getWindowId() {\n  return Math.random().toString(36).slice(2);\n};\n\nvar getTorusUrl = function getTorusUrl(buildEnv) {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var torusUrl, logLevel;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.t0 = buildEnv;\n            _context.next = _context.t0 === \"testing\" ? 3 : _context.t0 === \"development\" ? 6 : 9;\n            break;\n\n          case 3:\n            torusUrl = \"https://solana-testing.tor.us\";\n            logLevel = \"debug\";\n            return _context.abrupt(\"break\", 12);\n\n          case 6:\n            torusUrl = \"http://localhost:8080\";\n            logLevel = \"debug\";\n            return _context.abrupt(\"break\", 12);\n\n          case 9:\n            torusUrl = \"https://solana.tor.us\";\n            logLevel = \"error\";\n            return _context.abrupt(\"break\", 12);\n\n          case 12:\n            return _context.abrupt(\"return\", {\n              torusUrl: torusUrl,\n              logLevel: logLevel\n            });\n\n          case 13:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n};\n\nvar getUserLanguage = function getUserLanguage() {\n  var userLanguage = window.navigator.language || \"en-US\";\n  var userLanguages = userLanguage.split(\"-\");\n  userLanguage = Object.prototype.hasOwnProperty.call(configuration.translations, userLanguages[0]) ? userLanguages[0] : \"en\";\n  return userLanguage;\n};\n\nvar FEATURES_PROVIDER_CHANGE_WINDOW = {\n  height: 660,\n  width: 375\n};\nvar FEATURES_DEFAULT_WALLET_WINDOW = {\n  height: 740,\n  width: 1315\n};\nvar FEATURES_DEFAULT_POPUP_WINDOW = {\n  height: 700,\n  width: 1200\n};\nvar FEATURES_CONFIRM_WINDOW = {\n  height: 600,\n  width: 400\n};\n\nfunction storageAvailable(type) {\n  var storage;\n\n  try {\n    storage = window[type];\n    var x = \"__storage_test__\";\n    storage.setItem(x, x);\n    storage.removeItem(x);\n    return true;\n  } catch (e) {\n    return e && ( // everything except Firefox\n    e.code === 22 || // Firefox\n    e.code === 1014 || // test name field too, because code might not be present\n    // everything except Firefox\n    e.name === \"QuotaExceededError\" || // Firefox\n    e.name === \"NS_ERROR_DOM_QUOTA_REACHED\") && // acknowledge QuotaExceededError only if there's something already stored\n    storage && storage.length !== 0;\n  }\n}\n/**\n * popup handler utils\n */\n\n\nfunction getPopupFeatures(_ref) {\n  var w = _ref.width,\n      h = _ref.height;\n  // Fixes dual-screen position                             Most browsers      Firefox\n  var dualScreenLeft = window.screenLeft !== undefined ? window.screenLeft : window.screenX;\n  var dualScreenTop = window.screenTop !== undefined ? window.screenTop : window.screenY;\n  var width = window.innerWidth ? window.innerWidth : document.documentElement.clientWidth ? document.documentElement.clientWidth : window.screen.width;\n  var height = window.innerHeight ? window.innerHeight : document.documentElement.clientHeight ? document.documentElement.clientHeight : window.screen.height;\n  var systemZoom = 1; // No reliable estimate\n\n  var left = Math.abs((width - w) / 2 / systemZoom + dualScreenLeft);\n  var top = Math.abs((height - h) / 2 / systemZoom + dualScreenTop);\n  var features = \"titlebar=0,toolbar=0,status=0,location=0,menubar=0,height=\".concat(h / systemZoom, \",width=\").concat(w / systemZoom, \",top=\").concat(top, \",left=\").concat(left);\n  return features;\n}\n/**\n * @param {Object} connectionStream - A Node.js duplex stream\n * @param {Object} opts - An options bag\n * @param {number} opts.maxEventListeners - The maximum number of event listeners\n */\n\n\nvar BaseProvider = /*#__PURE__*/function (_SafeEventEmitter) {\n  _inherits(BaseProvider, _SafeEventEmitter);\n\n  var _super = _createSuper(BaseProvider);\n\n  function BaseProvider(connectionStream, _ref2) {\n    var _this;\n\n    var _ref2$maxEventListene = _ref2.maxEventListeners,\n        maxEventListeners = _ref2$maxEventListene === void 0 ? 100 : _ref2$maxEventListene,\n        _ref2$jsonRpcStreamNa = _ref2.jsonRpcStreamName,\n        jsonRpcStreamName = _ref2$jsonRpcStreamNa === void 0 ? \"provider\" : _ref2$jsonRpcStreamNa;\n\n    _classCallCheck(this, BaseProvider);\n\n    _this = _super.call(this);\n\n    if (!isDuplexStream(connectionStream)) {\n      throw new Error(messages.errors.invalidDuplexStream());\n    }\n\n    _this.isTorus = true;\n\n    _this.setMaxListeners(maxEventListeners);\n\n    _this._handleConnect = _this._handleConnect.bind(_assertThisInitialized(_this));\n    _this._handleDisconnect = _this._handleDisconnect.bind(_assertThisInitialized(_this));\n    _this._handleStreamDisconnect = _this._handleStreamDisconnect.bind(_assertThisInitialized(_this));\n    _this._rpcRequest = _this._rpcRequest.bind(_assertThisInitialized(_this));\n    _this._initializeState = _this._initializeState.bind(_assertThisInitialized(_this));\n    _this.request = _this.request.bind(_assertThisInitialized(_this));\n    _this.sendAsync = _this.sendAsync.bind(_assertThisInitialized(_this)); // this.enable = this.enable.bind(this);\n    // setup connectionStream multiplexing\n\n    var mux = new ObjectMultiplex();\n    pump(connectionStream, mux, connectionStream, _this._handleStreamDisconnect.bind(_assertThisInitialized(_this), \"Torus\")); // ignore phishing warning message (handled elsewhere)\n\n    mux.ignoreStream(\"phishing\"); // setup own event listeners\n    // connect to async provider\n\n    var jsonRpcConnection = createStreamMiddleware();\n    pump(jsonRpcConnection.stream, mux.createStream(jsonRpcStreamName), jsonRpcConnection.stream, _this._handleStreamDisconnect.bind(_assertThisInitialized(_this), \"Torus RpcProvider\")); // handle RPC requests via dapp-side rpc engine\n\n    var rpcEngine = new JRPCEngine();\n    rpcEngine.push(createIdRemapMiddleware());\n    rpcEngine.push(createErrorMiddleware());\n    rpcEngine.push(createLoggerMiddleware({\n      origin: location.origin\n    }));\n    rpcEngine.push(jsonRpcConnection.middleware);\n    _this._rpcEngine = rpcEngine;\n    _this.jsonRpcConnectionEvents = jsonRpcConnection.events;\n    return _this;\n  }\n  /**\n   * Submits an RPC request for the given method, with the given params.\n   * Resolves with the result of the method call, or rejects on error.\n   *\n   * @param {Object} args - The RPC request arguments.\n   * @param {string} args.method - The RPC method name.\n   * @param {unknown[] | Object} [args.params] - The parameters for the RPC method.\n   * @returns {Promise<unknown>} A Promise that resolves with the result of the RPC method,\n   * or rejects if an error is encountered.\n   */\n\n\n  _createClass(BaseProvider, [{\n    key: \"request\",\n    value: function request(args) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var _this2 = this;\n\n        var method, params;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!(!args || typeof args !== \"object\" || Array.isArray(args))) {\n                  _context2.next = 2;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: messages.errors.invalidRequestArgs(),\n                  data: args\n                });\n\n              case 2:\n                method = args.method, params = args.params;\n\n                if (!(typeof method !== \"string\" || method.length === 0)) {\n                  _context2.next = 5;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: messages.errors.invalidRequestMethod(),\n                  data: args\n                });\n\n              case 5:\n                if (!(params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null))) {\n                  _context2.next = 7;\n                  break;\n                }\n\n                throw ethErrors.rpc.invalidRequest({\n                  message: messages.errors.invalidRequestParams(),\n                  data: args\n                });\n\n              case 7:\n                return _context2.abrupt(\"return\", new Promise(function (resolve, reject) {\n                  _this2._rpcRequest({\n                    method: method,\n                    params: params\n                  }, getRpcPromiseCallback(resolve, reject));\n                }));\n\n              case 8:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n    }\n    /**\n     * Submits an RPC request per the given JSON-RPC request object.\n     *\n     * @param {Object} payload - The RPC request object.\n     * @param {Function} cb - The callback function.\n     */\n\n  }, {\n    key: \"send\",\n    value: function send(payload, callback) {\n      this._rpcRequest(payload, callback);\n    }\n    /**\n     * Submits an RPC request per the given JSON-RPC request object.\n     *\n     * @param {Object} payload - The RPC request object.\n     * @param {Function} cb - The callback function.\n     */\n\n  }, {\n    key: \"sendAsync\",\n    value: function sendAsync(payload) {\n      var _this3 = this;\n\n      return new Promise(function (resolve, reject) {\n        _this3._rpcRequest(payload, getRpcPromiseCallback(resolve, reject));\n      });\n    }\n    /**\n     * Called when connection is lost to critical streams.\n     *\n     * @emits TorusInpageProvider#disconnect\n     */\n\n  }, {\n    key: \"_handleStreamDisconnect\",\n    value: function _handleStreamDisconnect(streamName, error) {\n      logStreamDisconnectWarning(streamName, error, this);\n\n      this._handleDisconnect(false, error ? error.message : undefined);\n    }\n  }]);\n\n  return BaseProvider;\n}(SafeEventEmitter);\n\nvar handleEvent = function handleEvent(handle, eventName, handler) {\n  for (var _len = arguments.length, handlerArgs = new Array(_len > 3 ? _len - 3 : 0), _key = 3; _key < _len; _key++) {\n    handlerArgs[_key - 3] = arguments[_key];\n  }\n\n  var handlerWrapper = function handlerWrapper() {\n    handler.apply(void 0, handlerArgs);\n    handle.removeEventListener(eventName, handlerWrapper);\n  };\n\n  handle.addEventListener(eventName, handlerWrapper);\n};\n\nfunction documentReady() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            return _context3.abrupt(\"return\", new Promise(function (resolve) {\n              if (document.readyState !== \"loading\") {\n                resolve();\n              } else {\n                handleEvent(document, \"DOMContentLoaded\", resolve);\n              }\n            }));\n\n          case 1:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}\n\nvar htmlToElement = function htmlToElement(html) {\n  var template = window.document.createElement(\"template\");\n  var trimmedHtml = html.trim(); // Never return a text node of whitespace as the result\n\n  template.innerHTML = trimmedHtml;\n  return template.content.firstChild;\n};\n\nvar PopupHandler = /*#__PURE__*/function (_SafeEventEmitter2) {\n  _inherits(PopupHandler, _SafeEventEmitter2);\n\n  var _super2 = _createSuper(PopupHandler);\n\n  function PopupHandler(_ref3) {\n    var _this4;\n\n    var url = _ref3.url,\n        target = _ref3.target,\n        features = _ref3.features;\n\n    _classCallCheck(this, PopupHandler);\n\n    _this4 = _super2.call(this);\n    _this4.url = url;\n    _this4.target = target || \"_blank\";\n    _this4.features = features || getPopupFeatures(FEATURES_DEFAULT_POPUP_WINDOW);\n    _this4.window = undefined;\n    _this4.windowTimer = undefined;\n    _this4.iClosedWindow = false;\n\n    _this4._setupTimer();\n\n    return _this4;\n  }\n\n  _createClass(PopupHandler, [{\n    key: \"_setupTimer\",\n    value: function _setupTimer() {\n      var _this5 = this;\n\n      this.windowTimer = Number(setInterval(function () {\n        if (_this5.window && _this5.window.closed) {\n          clearInterval(_this5.windowTimer);\n\n          if (!_this5.iClosedWindow) {\n            _this5.emit(\"close\");\n          }\n\n          _this5.iClosedWindow = false;\n          _this5.window = undefined;\n        }\n\n        if (_this5.window === undefined) clearInterval(_this5.windowTimer);\n      }, 500));\n    }\n  }, {\n    key: \"open\",\n    value: function open() {\n      var _a;\n\n      this.window = window.open(this.url.href, this.target, this.features);\n      if ((_a = this.window) === null || _a === void 0 ? void 0 : _a.focus) this.window.focus();\n      return Promise.resolve();\n    }\n  }, {\n    key: \"close\",\n    value: function close() {\n      this.iClosedWindow = true;\n      if (this.window) this.window.close();\n    }\n  }, {\n    key: \"redirect\",\n    value: function redirect(locationReplaceOnRedirect) {\n      if (locationReplaceOnRedirect) {\n        window.location.replace(this.url.href);\n      } else {\n        window.location.href = this.url.href;\n      }\n    }\n  }]);\n\n  return PopupHandler;\n}(SafeEventEmitter);\n/**\n * @param {Object} connectionStream - A Node.js duplex stream\n * @param {Object} opts - An options bag\n * @param {number} opts.maxEventListeners - The maximum number of event listeners\n */\n\n\nvar TorusCommunicationProvider = /*#__PURE__*/function (_BaseProvider) {\n  _inherits(TorusCommunicationProvider, _BaseProvider);\n\n  var _super3 = _createSuper(TorusCommunicationProvider);\n\n  function TorusCommunicationProvider(connectionStream, _ref4) {\n    var _this6;\n\n    var _ref4$maxEventListene = _ref4.maxEventListeners,\n        maxEventListeners = _ref4$maxEventListene === void 0 ? 100 : _ref4$maxEventListene,\n        _ref4$jsonRpcStreamNa = _ref4.jsonRpcStreamName,\n        jsonRpcStreamName = _ref4$jsonRpcStreamNa === void 0 ? \"provider\" : _ref4$jsonRpcStreamNa;\n\n    _classCallCheck(this, TorusCommunicationProvider);\n\n    _this6 = _super3.call(this, connectionStream, {\n      maxEventListeners: maxEventListeners,\n      jsonRpcStreamName: jsonRpcStreamName\n    }); // private state\n\n    _this6._state = Object.assign({}, TorusCommunicationProvider._defaultState); // public state\n\n    _this6.torusUrl = \"\";\n    _this6.dappStorageKey = \"\";\n    var languageTranslations = configuration.translations[getUserLanguage()];\n    _this6.embedTranslations = languageTranslations.embed;\n    _this6.windowRefs = {}; // setup own event listeners\n    // EIP-1193 connect\n\n    _this6.on(\"connect\", function () {\n      _this6._state.isConnected = true;\n    });\n\n    var notificationHandler = function notificationHandler(payload) {\n      var method = payload.method,\n          params = payload.params;\n\n      if (method === COMMUNICATION_NOTIFICATIONS.IFRAME_STATUS) {\n        var isFullScreen = params.isFullScreen,\n            rid = params.rid;\n\n        _this6._displayIframe({\n          isFull: isFullScreen,\n          rid: rid\n        });\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CREATE_WINDOW) {\n        var windowId = params.windowId,\n            url = params.url;\n\n        _this6._createPopupBlockAlert(windowId, url);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.CLOSE_WINDOW) {\n        _this6._handleCloseWindow(params);\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_IN) {\n        var currentLoginProvider = params.currentLoginProvider;\n        _this6._state.isLoggedIn = true;\n        _this6._state.currentLoginProvider = currentLoginProvider;\n      } else if (method === COMMUNICATION_NOTIFICATIONS.USER_LOGGED_OUT) {\n        _this6._state.isLoggedIn = false;\n        _this6._state.currentLoginProvider = null;\n\n        _this6._displayIframe();\n      }\n    };\n\n    _this6.jsonRpcConnectionEvents.on(\"notification\", notificationHandler);\n\n    return _this6;\n  }\n  /**\n   * Returns whether the inPage provider is connected to Torus.\n   */\n\n\n  _createClass(TorusCommunicationProvider, [{\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._state.isConnected;\n    }\n  }, {\n    key: \"isLoggedIn\",\n    get: function get() {\n      return this._state.isLoggedIn;\n    }\n  }, {\n    key: \"isIFrameFullScreen\",\n    get: function get() {\n      return this._state.isIFrameFullScreen;\n    }\n  }, {\n    key: \"_initializeState\",\n    value: function _initializeState(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee4() {\n        var _this7 = this;\n\n        var torusUrl, dappStorageKey, torusAlertContainer, torusIframe, _yield$this$request, currentLoginProvider, isLoggedIn;\n\n        return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                _context4.prev = 0;\n                torusUrl = params.torusUrl, dappStorageKey = params.dappStorageKey, torusAlertContainer = params.torusAlertContainer, torusIframe = params.torusIframe;\n                this.torusUrl = torusUrl;\n                this.dappStorageKey = dappStorageKey;\n                this.torusAlertContainer = torusAlertContainer;\n                this.torusIframe = torusIframe;\n                this.torusIframe.addEventListener(\"load\", function () {\n                  // only do this if iframe is not full screen\n                  if (!_this7._state.isIFrameFullScreen) _this7._displayIframe();\n                });\n                _context4.next = 9;\n                return this.request({\n                  method: COMMUNICATION_JRPC_METHODS.GET_PROVIDER_STATE,\n                  params: []\n                });\n\n              case 9:\n                _yield$this$request = _context4.sent;\n                currentLoginProvider = _yield$this$request.currentLoginProvider;\n                isLoggedIn = _yield$this$request.isLoggedIn;\n\n                // indicate that we've connected, for EIP-1193 compliance\n                this._handleConnect(currentLoginProvider, isLoggedIn);\n\n                _context4.next = 18;\n                break;\n\n              case 15:\n                _context4.prev = 15;\n                _context4.t0 = _context4[\"catch\"](0);\n                log.error(\"Torus: Failed to get initial state. Please report this bug.\", _context4.t0);\n\n              case 18:\n                _context4.prev = 18;\n                log.info(\"initialized communication state\");\n                this._state.initialized = true;\n                this.emit(\"_initialized\");\n                return _context4.finish(18);\n\n              case 23:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this, [[0, 15, 18, 23]]);\n      }));\n    }\n    /**\n     * Internal RPC method. Forwards requests to background via the RPC engine.\n     * Also remap ids inbound and outbound\n     */\n\n  }, {\n    key: \"_rpcRequest\",\n    value: function _rpcRequest(payload, callback) {\n      var cb = callback;\n      var _payload = payload;\n\n      if (!Array.isArray(_payload)) {\n        if (!_payload.jsonrpc) {\n          _payload.jsonrpc = \"2.0\";\n        }\n      }\n\n      this.tryWindowHandle(_payload, cb);\n    }\n    /**\n     * When the provider becomes connected, updates internal state and emits\n     * required events. Idempotent.\n     *\n     * @param currentLoginProvider - The login Provider\n     * @emits TorusInpageProvider#connect\n     */\n\n  }, {\n    key: \"_handleConnect\",\n    value: function _handleConnect(currentLoginProvider, isLoggedIn) {\n      if (!this._state.isConnected) {\n        this._state.isConnected = true;\n        this.emit(\"connect\", {\n          currentLoginProvider: currentLoginProvider,\n          isLoggedIn: isLoggedIn\n        });\n        log.debug(messages.info.connected(currentLoginProvider));\n      }\n    }\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * @emits TorusInpageProvider#disconnect\n     */\n\n  }, {\n    key: \"_handleDisconnect\",\n    value: function _handleDisconnect(isRecoverable, errorMessage) {\n      if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n        this._state.isConnected = false;\n        var error;\n\n        if (isRecoverable) {\n          error = new EthereumRpcError(1013, // Try again later\n          errorMessage || messages.errors.disconnected());\n          log.debug(error);\n        } else {\n          error = new EthereumRpcError(1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected());\n          log.error(error);\n          this._state.currentLoginProvider = null;\n          this._state.isLoggedIn = false;\n          this._state.torusWidgetVisibility = true;\n          this._state.isIFrameFullScreen = false;\n          this._state.isPermanentlyDisconnected = true;\n        }\n\n        this.emit(\"disconnect\", error);\n      }\n    }\n  }, {\n    key: \"_handleWindow\",\n    value: function _handleWindow(windowId) {\n      var _this8 = this;\n\n      var _ref5 = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {},\n          url = _ref5.url,\n          target = _ref5.target,\n          features = _ref5.features;\n\n      var finalUrl = new URL(url || \"\".concat(this.torusUrl, \"/redirect?windowId=\").concat(windowId));\n\n      if (this.dappStorageKey) {\n        // If multiple instances, it returns the first one\n        if (finalUrl.hash) finalUrl.hash += \"&dappStorageKey=\".concat(this.dappStorageKey);else finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n      }\n\n      var handledWindow = new PopupHandler({\n        url: finalUrl,\n        target: target,\n        features: features\n      });\n      handledWindow.open();\n\n      if (!handledWindow.window) {\n        this._createPopupBlockAlert(windowId, finalUrl.href);\n\n        return;\n      } // Add to collection only if window is opened\n\n\n      this.windowRefs[windowId] = handledWindow; // We tell the iframe that the window has been successfully opened\n\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.OPENED_WINDOW,\n        params: {\n          windowId: windowId\n        }\n      });\n      handledWindow.once(\"close\", function () {\n        // user closed the window\n        delete _this8.windowRefs[windowId];\n\n        _this8.request({\n          method: COMMUNICATION_JRPC_METHODS.CLOSED_WINDOW,\n          params: {\n            windowId: windowId\n          }\n        });\n      });\n    } // Called if the iframe wants to close the window cause it is done processing the request\n\n  }, {\n    key: \"_handleCloseWindow\",\n    value: function _handleCloseWindow(params) {\n      var windowId = params.windowId;\n\n      if (this.windowRefs[windowId]) {\n        this.windowRefs[windowId].close();\n        delete this.windowRefs[windowId];\n      }\n    }\n  }, {\n    key: \"_createPopupBlockAlert\",\n    value: function _createPopupBlockAlert(windowId, url) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n        var _this9 = this;\n\n        var logoUrl, torusAlert, successAlert, btnContainer, bindOnLoad, attachOnLoad;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                logoUrl = this.getLogoUrl();\n                torusAlert = htmlToElement('<div id=\"torusAlert\" class=\"torus-alert--v2\" style=\"display:block;\">' + \"<div id=\\\"torusAlert__logo\\\"><img src=\\\"\".concat(logoUrl, \"\\\" /></div>\") + \"<div>\" + \"<h1 id=\\\"torusAlert__title\\\">\".concat(this.embedTranslations.actionRequired, \"</h1>\") + \"<p id=\\\"torusAlert__desc\\\">\".concat(this.embedTranslations.pendingAction, \"</p>\") + \"</div>\" + \"</div>\");\n                successAlert = htmlToElement(\"<div><a id=\\\"torusAlert__btn\\\">\".concat(this.embedTranslations.continue, \"</a></div>\"));\n                btnContainer = htmlToElement('<div id=\"torusAlert__btn-container\"></div>');\n                btnContainer.appendChild(successAlert);\n                torusAlert.appendChild(btnContainer);\n\n                bindOnLoad = function bindOnLoad() {\n                  successAlert.addEventListener(\"click\", function () {\n                    _this9._handleWindow(windowId, {\n                      url: url,\n                      target: \"_blank\",\n                      features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                    });\n\n                    torusAlert.remove();\n                    if (_this9.torusAlertContainer.children.length === 0) _this9.torusAlertContainer.style.display = \"none\";\n                  });\n                };\n\n                attachOnLoad = function attachOnLoad() {\n                  _this9.torusAlertContainer.appendChild(torusAlert);\n                };\n\n                _context5.next = 10;\n                return documentReady();\n\n              case 10:\n                attachOnLoad();\n                bindOnLoad();\n\n              case 12:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n    }\n  }, {\n    key: \"getLogoUrl\",\n    value: function getLogoUrl() {\n      var logoUrl = \"\".concat(this.torusUrl, \"/images/torus_icon-blue.svg\");\n      return logoUrl;\n    }\n  }, {\n    key: \"_displayIframe\",\n    value: function _displayIframe() {\n      var _ref6 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref6$isFull = _ref6.isFull,\n          isFull = _ref6$isFull === void 0 ? false : _ref6$isFull,\n          _ref6$rid = _ref6.rid,\n          rid = _ref6$rid === void 0 ? \"\" : _ref6$rid;\n\n      var style = {}; // set phase\n\n      if (!isFull) {\n        style.display = this._state.torusWidgetVisibility ? \"block\" : \"none\";\n        style.height = \"70px\";\n        style.width = \"70px\";\n\n        switch (this._state.buttonPosition) {\n          case BUTTON_POSITION.TOP_LEFT:\n            style.top = \"0px\";\n            style.left = \"0px\";\n            style.right = \"auto\";\n            style.bottom = \"auto\";\n            break;\n\n          case BUTTON_POSITION.TOP_RIGHT:\n            style.top = \"0px\";\n            style.right = \"0px\";\n            style.left = \"auto\";\n            style.bottom = \"auto\";\n            break;\n\n          case BUTTON_POSITION.BOTTOM_RIGHT:\n            style.bottom = \"0px\";\n            style.right = \"0px\";\n            style.top = \"auto\";\n            style.left = \"auto\";\n            break;\n\n          case BUTTON_POSITION.BOTTOM_LEFT:\n          default:\n            style.bottom = \"0px\";\n            style.left = \"0px\";\n            style.top = \"auto\";\n            style.right = \"auto\";\n            break;\n        }\n      } else {\n        style.display = \"block\";\n        style.width = \"100%\";\n        style.height = \"100%\";\n        style.top = \"0px\";\n        style.right = \"0px\";\n        style.left = \"0px\";\n        style.bottom = \"0px\";\n      }\n\n      Object.assign(this.torusIframe.style, style);\n      this._state.isIFrameFullScreen = isFull;\n      this.request({\n        method: COMMUNICATION_JRPC_METHODS.IFRAME_STATUS,\n        params: {\n          isIFrameFullScreen: isFull,\n          rid: rid\n        }\n      });\n    }\n  }, {\n    key: \"hideTorusButton\",\n    value: function hideTorusButton() {\n      this._state.torusWidgetVisibility = false;\n\n      this._displayIframe();\n    }\n  }, {\n    key: \"showTorusButton\",\n    value: function showTorusButton() {\n      this._state.torusWidgetVisibility = true;\n\n      this._displayIframe();\n    }\n  }]);\n\n  return TorusCommunicationProvider;\n}(BaseProvider);\n\nTorusCommunicationProvider._defaultState = {\n  buttonPosition: \"bottom-left\",\n  currentLoginProvider: null,\n  isIFrameFullScreen: false,\n  hasEmittedConnection: false,\n  torusWidgetVisibility: true,\n  initialized: false,\n  isLoggedIn: false,\n  isPermanentlyDisconnected: false,\n  isConnected: false\n};\n/**\n * @param {Object} connectionStream - A Node.js duplex stream\n * @param {Object} opts - An options bag\n * @param {number} opts.maxEventListeners - The maximum number of event listeners\n */\n\nvar TorusInPageProvider = /*#__PURE__*/function (_BaseProvider2) {\n  _inherits(TorusInPageProvider, _BaseProvider2);\n\n  var _super4 = _createSuper(TorusInPageProvider);\n\n  function TorusInPageProvider(connectionStream, _ref7) {\n    var _this10;\n\n    var _ref7$maxEventListene = _ref7.maxEventListeners,\n        maxEventListeners = _ref7$maxEventListene === void 0 ? 100 : _ref7$maxEventListene,\n        _ref7$jsonRpcStreamNa = _ref7.jsonRpcStreamName,\n        jsonRpcStreamName = _ref7$jsonRpcStreamNa === void 0 ? \"provider\" : _ref7$jsonRpcStreamNa;\n\n    _classCallCheck(this, TorusInPageProvider);\n\n    _this10 = _super4.call(this, connectionStream, {\n      maxEventListeners: maxEventListeners,\n      jsonRpcStreamName: jsonRpcStreamName\n    }); // private state\n\n    _this10._state = Object.assign({}, TorusInPageProvider._defaultState); // public state\n\n    _this10.selectedAddress = null;\n    _this10.chainId = null;\n    _this10._handleAccountsChanged = _this10._handleAccountsChanged.bind(_assertThisInitialized(_this10));\n    _this10._handleChainChanged = _this10._handleChainChanged.bind(_assertThisInitialized(_this10));\n    _this10._handleUnlockStateChanged = _this10._handleUnlockStateChanged.bind(_assertThisInitialized(_this10)); // setup own event listeners\n    // EIP-1193 connect\n\n    _this10.on(\"connect\", function () {\n      _this10._state.isConnected = true;\n    });\n\n    var jsonRpcNotificationHandler = function jsonRpcNotificationHandler(payload) {\n      var method = payload.method,\n          params = payload.params;\n\n      if (method === PROVIDER_NOTIFICATIONS.ACCOUNTS_CHANGED) {\n        _this10._handleAccountsChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.UNLOCK_STATE_CHANGED) {\n        _this10._handleUnlockStateChanged(params);\n      } else if (method === PROVIDER_NOTIFICATIONS.CHAIN_CHANGED) {\n        _this10._handleChainChanged(params);\n      }\n    }; // json rpc notification listener\n\n\n    _this10.jsonRpcConnectionEvents.on(\"notification\", jsonRpcNotificationHandler);\n\n    return _this10;\n  }\n  /**\n   * Returns whether the inpage provider is connected to Torus.\n   */\n\n\n  _createClass(TorusInPageProvider, [{\n    key: \"isConnected\",\n    value: function isConnected() {\n      return this._state.isConnected;\n    } // Private Methods\n    //= ===================\n\n    /**\n     * Constructor helper.\n     * Populates initial state by calling 'wallet_getProviderState' and emits\n     * necessary events.\n     */\n\n  }, {\n    key: \"_initializeState\",\n    value: function _initializeState() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee6() {\n        var _yield$this$request2, accounts, chainId, isUnlocked;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                _context6.prev = 0;\n                _context6.next = 3;\n                return this.request({\n                  method: PROVIDER_JRPC_METHODS.GET_PROVIDER_STATE,\n                  params: []\n                });\n\n              case 3:\n                _yield$this$request2 = _context6.sent;\n                accounts = _yield$this$request2.accounts;\n                chainId = _yield$this$request2.chainId;\n                isUnlocked = _yield$this$request2.isUnlocked;\n                // indicate that we've connected, for EIP-1193 compliance\n                this.emit(\"connect\", {\n                  chainId: chainId\n                });\n\n                this._handleChainChanged({\n                  chainId: chainId\n                });\n\n                this._handleUnlockStateChanged({\n                  accounts: accounts,\n                  isUnlocked: isUnlocked\n                });\n\n                this._handleAccountsChanged(accounts);\n\n                _context6.next = 16;\n                break;\n\n              case 13:\n                _context6.prev = 13;\n                _context6.t0 = _context6[\"catch\"](0);\n                log.error(\"Torus: Failed to get initial state. Please report this bug.\", _context6.t0);\n\n              case 16:\n                _context6.prev = 16;\n                log.info(\"initialized provider state\");\n                this._state.initialized = true;\n                this.emit(\"_initialized\");\n                return _context6.finish(16);\n\n              case 21:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[0, 13, 16, 21]]);\n      }));\n    }\n    /**\n     * Internal RPC method. Forwards requests to background via the RPC engine.\n     * Also remap ids inbound and outbound\n     */\n\n  }, {\n    key: \"_rpcRequest\",\n    value: function _rpcRequest(payload, callback) {\n      var _this11 = this;\n\n      var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      var cb = callback;\n      var _payload = payload;\n\n      if (!Array.isArray(_payload)) {\n        if (!_payload.jsonrpc) {\n          _payload.jsonrpc = \"2.0\";\n        }\n\n        if (_payload.method === \"solana_accounts\" || _payload.method === \"solana_requestAccounts\") {\n          // handle accounts changing\n          cb = function cb(err, res) {\n            _this11._handleAccountsChanged(res.result || [], _payload.method === \"solana_accounts\", isInternal);\n\n            callback(err, res);\n          };\n        } else if (_payload.method === \"wallet_getProviderState\") {\n          this._rpcEngine.handle(payload, cb);\n\n          return;\n        }\n      }\n\n      this.tryWindowHandle(_payload, cb);\n    }\n    /**\n     * When the provider becomes connected, updates internal state and emits\n     * required events. Idempotent.\n     *\n     * @param chainId - The ID of the newly connected chain.\n     * @emits TorusInpageProvider#connect\n     */\n\n  }, {\n    key: \"_handleConnect\",\n    value: function _handleConnect(chainId) {\n      if (!this._state.isConnected) {\n        this._state.isConnected = true;\n        this.emit(\"connect\", {\n          chainId: chainId\n        });\n        log.debug(messages.info.connected(chainId));\n      }\n    }\n    /**\n     * When the provider becomes disconnected, updates internal state and emits\n     * required events. Idempotent with respect to the isRecoverable parameter.\n     *\n     * Error codes per the CloseEvent status codes as required by EIP-1193:\n     * https://developer.mozilla.org/en-US/docs/Web/API/CloseEvent#Status_codes\n     *\n     * @param isRecoverable - Whether the disconnection is recoverable.\n     * @param errorMessage - A custom error message.\n     * @emits TorusInpageProvider#disconnect\n     */\n\n  }, {\n    key: \"_handleDisconnect\",\n    value: function _handleDisconnect(isRecoverable, errorMessage) {\n      if (this._state.isConnected || !this._state.isPermanentlyDisconnected && !isRecoverable) {\n        this._state.isConnected = false;\n        var error;\n\n        if (isRecoverable) {\n          error = new EthereumRpcError(1013, // Try again later\n          errorMessage || messages.errors.disconnected());\n          log.debug(error);\n        } else {\n          error = new EthereumRpcError(1011, // Internal error\n          errorMessage || messages.errors.permanentlyDisconnected());\n          log.error(error);\n          this.chainId = null;\n          this._state.accounts = null;\n          this.selectedAddress = null;\n          this._state.isUnlocked = false;\n          this._state.isPermanentlyDisconnected = true;\n        }\n\n        this.emit(\"disconnect\", error);\n      }\n    }\n    /**\n     * Called when accounts may have changed.\n     */\n\n  }, {\n    key: \"_handleAccountsChanged\",\n    value: function _handleAccountsChanged(accounts) {\n      var isEthAccounts = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n      var isInternal = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n      // defensive programming\n      var finalAccounts = accounts;\n\n      if (!Array.isArray(finalAccounts)) {\n        log.error(\"Torus: Received non-array accounts parameter. Please report this bug.\", finalAccounts);\n        finalAccounts = [];\n      }\n\n      var _iterator = _createForOfIteratorHelper(accounts),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var account = _step.value;\n\n          if (typeof account !== \"string\") {\n            log.error(\"Torus: Received non-string account. Please report this bug.\", accounts);\n            finalAccounts = [];\n            break;\n          }\n        } // emit accountsChanged if anything about the accounts array has changed\n\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n\n      if (!dequal(this._state.accounts, finalAccounts)) {\n        // we should always have the correct accounts even before solana_accounts\n        // returns, except in cases where isInternal is true\n        if (isEthAccounts && Array.isArray(this._state.accounts) && this._state.accounts.length > 0 && !isInternal) {\n          log.error('Torus: \"solana_accounts\" unexpectedly updated accounts. Please report this bug.', finalAccounts);\n        }\n\n        this._state.accounts = finalAccounts;\n        this.emit(\"accountsChanged\", finalAccounts);\n      } // handle selectedAddress\n\n\n      if (this.selectedAddress !== finalAccounts[0]) {\n        this.selectedAddress = finalAccounts[0] || null;\n      }\n    }\n    /**\n     * Upon receipt of a new chainId and networkVersion, emits corresponding\n     * events and sets relevant public state.\n     * Does nothing if neither the chainId nor the networkVersion are different\n     * from existing values.\n     *\n     * @emits TorusInpageProvider#chainChanged\n     * @param networkInfo - An object with network info.\n     * @param networkInfo.chainId - The latest chain ID.\n     * @param networkInfo.networkVersion - The latest network ID.\n     */\n\n  }, {\n    key: \"_handleChainChanged\",\n    value: function _handleChainChanged() {\n      var _ref8 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          chainId = _ref8.chainId;\n\n      if (!chainId) {\n        log.error(\"Torus: Received invalid network parameters. Please report this bug.\", {\n          chainId: chainId\n        });\n        return;\n      }\n\n      if (chainId === \"loading\") {\n        this._handleDisconnect(true);\n      } else {\n        this._handleConnect(chainId);\n\n        if (chainId !== this.chainId) {\n          this.chainId = chainId;\n\n          if (this._state.initialized) {\n            this.emit(\"chainChanged\", this.chainId);\n          }\n        }\n      }\n    }\n    /**\n     * Upon receipt of a new isUnlocked state, sets relevant public state.\n     * Calls the accounts changed handler with the received accounts, or an empty\n     * array.\n     *\n     * Does nothing if the received value is equal to the existing value.\n     * There are no lock/unlock events.\n     *\n     * @param opts - Options bag.\n     * @param opts.accounts - The exposed accounts, if any.\n     * @param opts.isUnlocked - The latest isUnlocked value.\n     */\n\n  }, {\n    key: \"_handleUnlockStateChanged\",\n    value: function _handleUnlockStateChanged() {\n      var _ref9 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          accounts = _ref9.accounts,\n          isUnlocked = _ref9.isUnlocked;\n\n      if (typeof isUnlocked !== \"boolean\") {\n        log.error(\"Torus: Received invalid isUnlocked parameter. Please report this bug.\", {\n          isUnlocked: isUnlocked\n        });\n        return;\n      }\n\n      if (isUnlocked !== this._state.isUnlocked) {\n        this._state.isUnlocked = isUnlocked;\n\n        this._handleAccountsChanged(accounts || []);\n      }\n    }\n  }]);\n\n  return TorusInPageProvider;\n}(BaseProvider);\n\nTorusInPageProvider._defaultState = {\n  accounts: null,\n  isConnected: false,\n  isUnlocked: false,\n  initialized: false,\n  isPermanentlyDisconnected: false,\n  hasEmittedConnection: false\n};\n/**\n * Returns whether the given image URL exists\n * @param {string} url - the url of the image\n * @return {Promise<boolean>} whether the image exists\n */\n\nfunction imgExists(url) {\n  return new Promise(function (resolve, reject) {\n    try {\n      var img = document.createElement(\"img\");\n\n      img.onload = function () {\n        return resolve(true);\n      };\n\n      img.onerror = function () {\n        return resolve(false);\n      };\n\n      img.src = url;\n    } catch (e) {\n      reject(e);\n    }\n  });\n}\n/**\n * Extracts a name for the site from the DOM\n */\n\n\nvar getSiteName = function getSiteName(window) {\n  var document = window.document;\n  var siteName = document.querySelector('head > meta[property=\"og:site_name\"]');\n\n  if (siteName) {\n    return siteName.content;\n  }\n\n  var metaTitle = document.querySelector('head > meta[name=\"title\"]');\n\n  if (metaTitle) {\n    return metaTitle.content;\n  }\n\n  if (document.title && document.title.length > 0) {\n    return document.title;\n  }\n\n  return window.location.hostname;\n};\n/**\n * Extracts an icon for the site from the DOM\n */\n\n\nfunction getSiteIcon(window) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee7() {\n    var _document, icon;\n\n    return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n      while (1) {\n        switch (_context7.prev = _context7.next) {\n          case 0:\n            _context7.prev = 0;\n            _document = window.document; // Use the site's favicon if it exists\n\n            icon = _document.querySelector('head > link[rel=\"shortcut icon\"]');\n            _context7.t0 = icon;\n\n            if (!_context7.t0) {\n              _context7.next = 8;\n              break;\n            }\n\n            _context7.next = 7;\n            return imgExists(icon.href);\n\n          case 7:\n            _context7.t0 = _context7.sent;\n\n          case 8:\n            if (!_context7.t0) {\n              _context7.next = 10;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", icon.href);\n\n          case 10:\n            // Search through available icons in no particular order\n            icon = Array.from(_document.querySelectorAll('head > link[rel=\"icon\"]')).find(function (_icon) {\n              return Boolean(_icon.href);\n            });\n            _context7.t1 = icon;\n\n            if (!_context7.t1) {\n              _context7.next = 16;\n              break;\n            }\n\n            _context7.next = 15;\n            return imgExists(icon.href);\n\n          case 15:\n            _context7.t1 = _context7.sent;\n\n          case 16:\n            if (!_context7.t1) {\n              _context7.next = 18;\n              break;\n            }\n\n            return _context7.abrupt(\"return\", icon.href);\n\n          case 18:\n            return _context7.abrupt(\"return\", \"\");\n\n          case 21:\n            _context7.prev = 21;\n            _context7.t2 = _context7[\"catch\"](0);\n            return _context7.abrupt(\"return\", \"\");\n\n          case 24:\n          case \"end\":\n            return _context7.stop();\n        }\n      }\n    }, _callee7, null, [[0, 21]]);\n  }));\n}\n/**\n * Gets site metadata and returns it\n *\n */\n\n\nvar getSiteMetadata = function getSiteMetadata() {\n  return __awaiter(void 0, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee8() {\n    return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n      while (1) {\n        switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.t0 = getSiteName(window);\n            _context8.next = 3;\n            return getSiteIcon(window);\n\n          case 3:\n            _context8.t1 = _context8.sent;\n            return _context8.abrupt(\"return\", {\n              name: _context8.t0,\n              icon: _context8.t1\n            });\n\n          case 5:\n          case \"end\":\n            return _context8.stop();\n        }\n      }\n    }, _callee8);\n  }));\n};\n\nvar PROVIDER_UNSAFE_METHODS = [\"send_transaction\", \"sign_transaction\", \"sign_all_transaction\", \"sign_message\", \"connect\"];\nvar COMMUNICATION_UNSAFE_METHODS = [COMMUNICATION_JRPC_METHODS.SET_PROVIDER];\nvar isLocalStorageAvailable = storageAvailable(\"localStorage\"); // preload for iframe doesn't work https://bugs.chromium.org/p/chromium/issues/detail?id=593267\n\n(function preLoadIframe() {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee9() {\n    var torusIframeHtml, _yield$getTorusUrl, torusUrl;\n\n    return _regeneratorRuntime.wrap(function _callee9$(_context9) {\n      while (1) {\n        switch (_context9.prev = _context9.next) {\n          case 0:\n            _context9.prev = 0;\n\n            if (!(typeof document === \"undefined\")) {\n              _context9.next = 3;\n              break;\n            }\n\n            return _context9.abrupt(\"return\");\n\n          case 3:\n            torusIframeHtml = document.createElement(\"link\");\n            _context9.next = 6;\n            return getTorusUrl(\"production\");\n\n          case 6:\n            _yield$getTorusUrl = _context9.sent;\n            torusUrl = _yield$getTorusUrl.torusUrl;\n            torusIframeHtml.href = \"\".concat(torusUrl, \"/frame\");\n            torusIframeHtml.crossOrigin = \"anonymous\";\n            torusIframeHtml.type = \"text/html\";\n            torusIframeHtml.rel = \"prefetch\";\n\n            if (torusIframeHtml.relList && torusIframeHtml.relList.supports) {\n              if (torusIframeHtml.relList.supports(\"prefetch\")) {\n                document.head.appendChild(torusIframeHtml);\n              }\n            }\n\n            _context9.next = 18;\n            break;\n\n          case 15:\n            _context9.prev = 15;\n            _context9.t0 = _context9[\"catch\"](0);\n            log.warn(_context9.t0);\n\n          case 18:\n          case \"end\":\n            return _context9.stop();\n        }\n      }\n    }, _callee9, null, [[0, 15]]);\n  }));\n})();\n\nvar Torus = /*#__PURE__*/function () {\n  function Torus() {\n    var _ref10 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        _ref10$modalZIndex = _ref10.modalZIndex,\n        modalZIndex = _ref10$modalZIndex === void 0 ? 99999 : _ref10$modalZIndex;\n\n    _classCallCheck(this, Torus);\n\n    this.torusUrl = \"\";\n    this.isInitialized = false; // init done\n\n    this.requestedLoginProvider = null;\n    this.modalZIndex = modalZIndex;\n    this.alertZIndex = modalZIndex + 1000;\n    this.dappStorageKey = \"\";\n  }\n\n  _createClass(Torus, [{\n    key: \"isLoggedIn\",\n    get: function get() {\n      if (!this.communicationProvider) return false;\n      return this.communicationProvider.isLoggedIn;\n    }\n  }, {\n    key: \"init\",\n    value: function init() {\n      var _ref11 = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n          _ref11$buildEnv = _ref11.buildEnv,\n          buildEnv = _ref11$buildEnv === void 0 ? TORUS_BUILD_ENV.PRODUCTION : _ref11$buildEnv,\n          _ref11$enableLogging = _ref11.enableLogging,\n          enableLogging = _ref11$enableLogging === void 0 ? false : _ref11$enableLogging,\n          network = _ref11.network,\n          _ref11$showTorusButto = _ref11.showTorusButton,\n          showTorusButton = _ref11$showTorusButto === void 0 ? true : _ref11$showTorusButto,\n          _ref11$useLocalStorag = _ref11.useLocalStorage,\n          useLocalStorage = _ref11$useLocalStorag === void 0 ? false : _ref11$useLocalStorag,\n          _ref11$buttonPosition = _ref11.buttonPosition,\n          buttonPosition = _ref11$buttonPosition === void 0 ? BUTTON_POSITION.BOTTOM_LEFT : _ref11$buttonPosition,\n          _ref11$apiKey = _ref11.apiKey,\n          apiKey = _ref11$apiKey === void 0 ? \"torus-default\" : _ref11$apiKey,\n          _ref11$extraParams = _ref11.extraParams,\n          extraParams = _ref11$extraParams === void 0 ? {} : _ref11$extraParams;\n\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee12() {\n        var _this12 = this;\n\n        var _yield$getTorusUrl2, torusUrl, logLevel, dappStorageKey, torusIframeUrl, hashParams, handleSetup;\n\n        return _regeneratorRuntime.wrap(function _callee12$(_context12) {\n          while (1) {\n            switch (_context12.prev = _context12.next) {\n              case 0:\n                if (!this.isInitialized) {\n                  _context12.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Already initialized\");\n\n              case 2:\n                setAPIKey(apiKey);\n                _context12.next = 5;\n                return getTorusUrl(buildEnv);\n\n              case 5:\n                _yield$getTorusUrl2 = _context12.sent;\n                torusUrl = _yield$getTorusUrl2.torusUrl;\n                logLevel = _yield$getTorusUrl2.logLevel;\n                log.info(torusUrl, \"url loaded\");\n                this.torusUrl = torusUrl;\n                log.setDefaultLevel(logLevel);\n                if (enableLogging) log.enableAll();else log.disableAll();\n                dappStorageKey = this.handleDappStorageKey(useLocalStorage);\n                torusIframeUrl = new URL(torusUrl);\n                if (torusIframeUrl.pathname.endsWith(\"/\")) torusIframeUrl.pathname += \"frame\";else torusIframeUrl.pathname += \"/frame\";\n                hashParams = new URLSearchParams();\n                if (dappStorageKey) hashParams.append(\"dappStorageKey\", dappStorageKey);\n                hashParams.append(\"origin\", window.location.origin);\n                torusIframeUrl.hash = hashParams.toString(); // Iframe code\n\n                this.torusIframe = htmlToElement(\"<iframe\\n        id=\\\"torusIframe\\\"\\n        class=\\\"torusIframe\\\"\\n        src=\\\"\".concat(torusIframeUrl.href, \"\\\"\\n        style=\\\"display: none; position: fixed; top: 0; right: 0; width: 100%;\\n        height: 100%; border: none; border-radius: 0; z-index: \").concat(this.modalZIndex.toString(), \"\\\"\\n      ></iframe>\"));\n                this.torusAlertContainer = htmlToElement(\"<div id=\\\"torusAlertContainer style=\\\"display:none; z-index: \".concat(this.alertZIndex.toString(), \"\\\"></div>\"));\n                this.styleLink = htmlToElement(\"<link href=\\\"\".concat(torusUrl, \"/css/widget.css\\\" rel=\\\"stylesheet\\\" type=\\\"text/css\\\">\"));\n\n                handleSetup = function handleSetup() {\n                  return __awaiter(_this12, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee11() {\n                    var _this13 = this;\n\n                    return _regeneratorRuntime.wrap(function _callee11$(_context11) {\n                      while (1) {\n                        switch (_context11.prev = _context11.next) {\n                          case 0:\n                            window.document.head.appendChild(this.styleLink);\n                            window.document.body.appendChild(this.torusIframe);\n                            window.document.body.appendChild(this.torusAlertContainer);\n                            this.torusIframe.addEventListener(\"load\", function () {\n                              return __awaiter(_this13, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee10() {\n                                var dappMetadata;\n                                return _regeneratorRuntime.wrap(function _callee10$(_context10) {\n                                  while (1) {\n                                    switch (_context10.prev = _context10.next) {\n                                      case 0:\n                                        _context10.next = 2;\n                                        return getSiteMetadata();\n\n                                      case 2:\n                                        dappMetadata = _context10.sent;\n                                        // send init params here\n                                        this.torusIframe.contentWindow.postMessage({\n                                          buttonPosition: buttonPosition,\n                                          apiKey: apiKey,\n                                          network: network,\n                                          dappMetadata: dappMetadata,\n                                          extraParams: extraParams\n                                        }, torusIframeUrl.origin);\n\n                                      case 4:\n                                      case \"end\":\n                                        return _context10.stop();\n                                    }\n                                  }\n                                }, _callee10, this);\n                              }));\n                            });\n                            _context11.next = 6;\n                            return this._setupWeb3({\n                              torusUrl: torusUrl\n                            });\n\n                          case 6:\n                            if (showTorusButton) this.showTorusButton();else this.hideTorusButton();\n                            this.isInitialized = true;\n                            window.torus = this;\n\n                          case 9:\n                          case \"end\":\n                            return _context11.stop();\n                        }\n                      }\n                    }, _callee11, this);\n                  }));\n                };\n\n                _context12.next = 25;\n                return documentReady();\n\n              case 25:\n                _context12.next = 27;\n                return handleSetup();\n\n              case 27:\n              case \"end\":\n                return _context12.stop();\n            }\n          }\n        }, _callee12, this);\n      }));\n    }\n  }, {\n    key: \"handleDappStorageKey\",\n    value: function handleDappStorageKey(useLocalStorage) {\n      var dappStorageKey = \"\";\n\n      if (isLocalStorageAvailable && useLocalStorage) {\n        var storedKey = window.localStorage.getItem(configuration.localStorageKey);\n        if (storedKey) dappStorageKey = storedKey;else {\n          var generatedKey = \"torus-app-\".concat(getWindowId());\n          window.localStorage.setItem(configuration.localStorageKey, generatedKey);\n          dappStorageKey = generatedKey;\n        }\n      }\n\n      this.dappStorageKey = dappStorageKey;\n      return dappStorageKey;\n    }\n  }, {\n    key: \"login\",\n    value: function login() {\n      var params = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee13() {\n        var _this14 = this;\n\n        var reqParams, res;\n        return _regeneratorRuntime.wrap(function _callee13$(_context13) {\n          while (1) {\n            switch (_context13.prev = _context13.next) {\n              case 0:\n                if (this.isInitialized) {\n                  _context13.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Call init() first\");\n\n              case 2:\n                _context13.prev = 2;\n                this.requestedLoginProvider = params.loginProvider || null;\n                reqParams = {};\n\n                if (this.requestedLoginProvider) {\n                  reqParams.requestedLoginProvider = this.requestedLoginProvider;\n                  reqParams.windowId = getWindowId();\n\n                  this.communicationProvider._handleWindow(reqParams.windowId);\n                } else {\n                  this.communicationProvider._displayIframe({\n                    isFull: true\n                  });\n                } // If user is already logged in, we assume they have given access to the website\n\n\n                _context13.next = 8;\n                return new Promise(function (resolve, reject) {\n                  // We use this method because we want to update inPage provider state with account info\n                  _this14.provider._rpcRequest({\n                    method: \"solana_requestAccounts\",\n                    params: [_this14.requestedLoginProvider, params.login_hint]\n                  }, getRpcPromiseCallback(resolve, reject));\n                });\n\n              case 8:\n                res = _context13.sent;\n\n                if (!(Array.isArray(res) && res.length > 0)) {\n                  _context13.next = 11;\n                  break;\n                }\n\n                return _context13.abrupt(\"return\", res);\n\n              case 11:\n                throw new Error(\"Login failed\");\n\n              case 14:\n                _context13.prev = 14;\n                _context13.t0 = _context13[\"catch\"](2);\n                log.error(\"login failed\", _context13.t0);\n                throw _context13.t0;\n\n              case 18:\n                _context13.prev = 18;\n                if (this.communicationProvider.isIFrameFullScreen) this.communicationProvider._displayIframe();\n                return _context13.finish(18);\n\n              case 21:\n              case \"end\":\n                return _context13.stop();\n            }\n          }\n        }, _callee13, this, [[2, 14, 18, 21]]);\n      }));\n    }\n  }, {\n    key: \"logout\",\n    value: function logout() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee14() {\n        return _regeneratorRuntime.wrap(function _callee14$(_context14) {\n          while (1) {\n            switch (_context14.prev = _context14.next) {\n              case 0:\n                if (this.communicationProvider.isLoggedIn) {\n                  _context14.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Not logged in\");\n\n              case 2:\n                _context14.next = 4;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.LOGOUT,\n                  params: []\n                });\n\n              case 4:\n                this.requestedLoginProvider = null;\n\n              case 5:\n              case \"end\":\n                return _context14.stop();\n            }\n          }\n        }, _callee14, this);\n      }));\n    }\n  }, {\n    key: \"cleanUp\",\n    value: function cleanUp() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee15() {\n        return _regeneratorRuntime.wrap(function _callee15$(_context15) {\n          while (1) {\n            switch (_context15.prev = _context15.next) {\n              case 0:\n                if (!this.communicationProvider.isLoggedIn) {\n                  _context15.next = 3;\n                  break;\n                }\n\n                _context15.next = 3;\n                return this.logout();\n\n              case 3:\n                this.clearInit();\n\n              case 4:\n              case \"end\":\n                return _context15.stop();\n            }\n          }\n        }, _callee15, this);\n      }));\n    }\n  }, {\n    key: \"clearInit\",\n    value: function clearInit() {\n      function isElement(element) {\n        return element instanceof Element || element instanceof Document;\n      }\n\n      if (isElement(this.styleLink) && window.document.body.contains(this.styleLink)) {\n        this.styleLink.remove();\n        this.styleLink = undefined;\n      }\n\n      if (isElement(this.torusIframe) && window.document.body.contains(this.torusIframe)) {\n        this.torusIframe.remove();\n        this.torusIframe = undefined;\n      }\n\n      if (isElement(this.torusAlertContainer) && window.document.body.contains(this.torusAlertContainer)) {\n        this.torusAlert = undefined;\n        this.torusAlertContainer.remove();\n        this.torusAlertContainer = undefined;\n      }\n\n      this.isInitialized = false;\n    }\n  }, {\n    key: \"hideTorusButton\",\n    value: function hideTorusButton() {\n      this.communicationProvider.hideTorusButton();\n    }\n  }, {\n    key: \"showTorusButton\",\n    value: function showTorusButton() {\n      this.communicationProvider.showTorusButton();\n    }\n    /** @ignore */\n\n    /** @ignore */\n\n  }, {\n    key: \"_setupWeb3\",\n    value: function _setupWeb3(providerParams) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee16() {\n        var _this15 = this;\n\n        var providerStream, communicationStream, inPageProvider, communicationProvider, detectAccountRequestPrototypeModifier, proxiedInPageProvider, proxiedCommunicationProvider;\n        return _regeneratorRuntime.wrap(function _callee16$(_context16) {\n          while (1) {\n            switch (_context16.prev = _context16.next) {\n              case 0:\n                log.info(\"setupWeb3 running\"); // setup background connection\n\n                providerStream = new BasePostMessageStream({\n                  name: \"embed_torus\",\n                  target: \"iframe_torus\",\n                  targetWindow: this.torusIframe.contentWindow,\n                  targetOrigin: providerParams.torusUrl\n                }); // We create another LocalMessageDuplexStream for communication between dapp <> iframe\n\n                communicationStream = new BasePostMessageStream({\n                  name: \"embed_communication\",\n                  target: \"iframe_communication\",\n                  targetWindow: this.torusIframe.contentWindow,\n                  targetOrigin: providerParams.torusUrl\n                }); // compose the inPage provider\n\n                inPageProvider = new TorusInPageProvider(providerStream, {});\n                communicationProvider = new TorusCommunicationProvider(communicationStream, {});\n\n                inPageProvider.tryWindowHandle = function (payload, cb) {\n                  var _payload = payload;\n\n                  if (!Array.isArray(_payload) && PROVIDER_UNSAFE_METHODS.includes(_payload.method)) {\n                    if (!_this15.communicationProvider.isLoggedIn) throw new Error(\"User Not Logged In\");\n                    var windowId = getWindowId();\n\n                    communicationProvider._handleWindow(windowId, {\n                      target: \"_blank\",\n                      features: getPopupFeatures(FEATURES_CONFIRM_WINDOW)\n                    }); // for inPageProvider methods sending windowId in request instead of params\n                    // as params might be positional.\n\n\n                    _payload.windowId = windowId;\n                  }\n\n                  inPageProvider._rpcEngine.handle(_payload, cb);\n                };\n\n                communicationProvider.tryWindowHandle = function (payload, cb) {\n                  var _payload = payload;\n\n                  if (!Array.isArray(_payload) && COMMUNICATION_UNSAFE_METHODS.includes(_payload.method)) {\n                    var windowId = getWindowId();\n\n                    communicationProvider._handleWindow(windowId, {\n                      target: \"_blank\",\n                      features: getPopupFeatures(FEATURES_PROVIDER_CHANGE_WINDOW) // todo: are these features generic for all\n\n                    }); // for communication methods sending window id in jrpc req params\n\n\n                    _payload.params.windowId = windowId;\n                  }\n\n                  communicationProvider._rpcEngine.handle(_payload, cb);\n                }; // detect solana_requestAccounts and pipe to enable for now\n\n\n                detectAccountRequestPrototypeModifier = function detectAccountRequestPrototypeModifier(m) {\n                  var originalMethod = inPageProvider[m];\n                  var self = _this15;\n\n                  inPageProvider[m] = function providerFunc(request, cb) {\n                    var method = request.method,\n                        _request$params = request.params,\n                        params = _request$params === void 0 ? [] : _request$params;\n\n                    if (method === \"solana_requestAccounts\") {\n                      if (!cb) return self.login({\n                        loginProvider: params[0]\n                      });\n                      self.login({\n                        loginProvider: params[0]\n                      }) // eslint-disable-next-line promise/no-callback-in-promise\n                      .then(function (res) {\n                        return cb(null, res);\n                      }) // eslint-disable-next-line promise/no-callback-in-promise\n                      .catch(function (err) {\n                        return cb(err);\n                      });\n                    }\n\n                    return originalMethod.apply(this, [request, cb]);\n                  };\n                }; // Detects call to solana_requestAccounts in request & sendAsync and passes to login\n\n\n                detectAccountRequestPrototypeModifier(\"request\");\n                detectAccountRequestPrototypeModifier(\"sendAsync\");\n                detectAccountRequestPrototypeModifier(\"send\");\n                proxiedInPageProvider = new Proxy(inPageProvider, {\n                  // straight up lie that we deleted the property so that it doesn't\n                  // throw an error in strict mode\n                  deleteProperty: function deleteProperty() {\n                    return true;\n                  }\n                });\n                proxiedCommunicationProvider = new Proxy(communicationProvider, {\n                  // straight up lie that we deleted the property so that it doesn't\n                  // throw an error in strict mode\n                  deleteProperty: function deleteProperty() {\n                    return true;\n                  }\n                });\n                this.provider = proxiedInPageProvider;\n                this.communicationProvider = proxiedCommunicationProvider;\n                _context16.next = 17;\n                return Promise.all([inPageProvider._initializeState(), communicationProvider._initializeState(Object.assign(Object.assign({}, providerParams), {\n                  dappStorageKey: this.dappStorageKey,\n                  torusAlertContainer: this.torusAlertContainer,\n                  torusIframe: this.torusIframe\n                }))]);\n\n              case 17:\n                log.debug(\"Torus - injected provider\");\n\n              case 18:\n              case \"end\":\n                return _context16.stop();\n            }\n          }\n        }, _callee16, this);\n      }));\n    }\n  }, {\n    key: \"setProvider\",\n    value: function setProvider(params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee17() {\n        return _regeneratorRuntime.wrap(function _callee17$(_context17) {\n          while (1) {\n            switch (_context17.prev = _context17.next) {\n              case 0:\n                _context17.next = 2;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.SET_PROVIDER,\n                  params: Object.assign({}, params)\n                });\n\n              case 2:\n              case \"end\":\n                return _context17.stop();\n            }\n          }\n        }, _callee17, this);\n      }));\n    }\n  }, {\n    key: \"showWallet\",\n    value: function showWallet(path) {\n      var params = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee18() {\n        var instanceId, finalPath, finalUrl, walletWindow;\n        return _regeneratorRuntime.wrap(function _callee18$(_context18) {\n          while (1) {\n            switch (_context18.prev = _context18.next) {\n              case 0:\n                _context18.next = 2;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.WALLET_INSTANCE_ID,\n                  params: []\n                });\n\n              case 2:\n                instanceId = _context18.sent;\n                finalPath = path ? \"/\".concat(path) : \"\";\n                finalUrl = new URL(\"\".concat(this.torusUrl, \"/wallet\").concat(finalPath)); // Using URL constructor to prevent js injection and allow parameter validation.!\n\n                finalUrl.searchParams.append(\"instanceId\", instanceId);\n                Object.keys(params).forEach(function (x) {\n                  finalUrl.searchParams.append(x, params[x]);\n                });\n\n                if (this.dappStorageKey) {\n                  finalUrl.hash = \"#dappStorageKey=\".concat(this.dappStorageKey);\n                } // No need to track this window state. Hence, no _handleWindow call.\n\n\n                walletWindow = new PopupHandler({\n                  url: finalUrl,\n                  features: getPopupFeatures(FEATURES_DEFAULT_WALLET_WINDOW)\n                });\n                walletWindow.open();\n\n              case 10:\n              case \"end\":\n                return _context18.stop();\n            }\n          }\n        }, _callee18, this);\n      }));\n    }\n  }, {\n    key: \"getUserInfo\",\n    value: function getUserInfo() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee19() {\n        var userInfoResponse;\n        return _regeneratorRuntime.wrap(function _callee19$(_context19) {\n          while (1) {\n            switch (_context19.prev = _context19.next) {\n              case 0:\n                _context19.next = 2;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.USER_INFO,\n                  params: []\n                });\n\n              case 2:\n                userInfoResponse = _context19.sent;\n                return _context19.abrupt(\"return\", userInfoResponse);\n\n              case 4:\n              case \"end\":\n                return _context19.stop();\n            }\n          }\n        }, _callee19, this);\n      }));\n    }\n  }, {\n    key: \"initiateTopup\",\n    value: function initiateTopup(provider, params) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee20() {\n        var windowId, topupResponse;\n        return _regeneratorRuntime.wrap(function _callee20$(_context20) {\n          while (1) {\n            switch (_context20.prev = _context20.next) {\n              case 0:\n                if (this.isInitialized) {\n                  _context20.next = 2;\n                  break;\n                }\n\n                throw new Error(\"Torus is not initialized\");\n\n              case 2:\n                windowId = getWindowId();\n\n                this.communicationProvider._handleWindow(windowId);\n\n                _context20.next = 6;\n                return this.communicationProvider.request({\n                  method: COMMUNICATION_JRPC_METHODS.TOPUP,\n                  params: {\n                    provider: provider,\n                    params: params,\n                    windowId: windowId\n                  }\n                });\n\n              case 6:\n                topupResponse = _context20.sent;\n                return _context20.abrupt(\"return\", topupResponse);\n\n              case 8:\n              case \"end\":\n                return _context20.stop();\n            }\n          }\n        }, _callee20, this);\n      }));\n    } // Solana specific API\n\n  }, {\n    key: \"sendTransaction\",\n    value: function sendTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee21() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee21$(_context21) {\n          while (1) {\n            switch (_context21.prev = _context21.next) {\n              case 0:\n                _context21.next = 2;\n                return this.provider.request({\n                  method: \"send_transaction\",\n                  params: {\n                    message: transaction.serializeMessage().toString(\"hex\")\n                  }\n                });\n\n              case 2:\n                response = _context21.sent;\n                return _context21.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context21.stop();\n            }\n          }\n        }, _callee21, this);\n      }));\n    }\n  }, {\n    key: \"signTransaction\",\n    value: function signTransaction(transaction) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee22() {\n        var response, buf, sendTx;\n        return _regeneratorRuntime.wrap(function _callee22$(_context22) {\n          while (1) {\n            switch (_context22.prev = _context22.next) {\n              case 0:\n                _context22.next = 2;\n                return this.provider.request({\n                  method: \"sign_transaction\",\n                  params: {\n                    message: transaction.serializeMessage().toString(\"hex\")\n                  }\n                });\n\n              case 2:\n                response = _context22.sent;\n                buf = Buffer.from(response, \"hex\");\n                sendTx = Transaction.from(buf);\n                return _context22.abrupt(\"return\", sendTx);\n\n              case 6:\n              case \"end\":\n                return _context22.stop();\n            }\n          }\n        }, _callee22, this);\n      }));\n    }\n  }, {\n    key: \"signAllTransactions\",\n    value: function signAllTransactions(transactions) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee23() {\n        var signed_transactions, _iterator2, _step2, transaction, res;\n\n        return _regeneratorRuntime.wrap(function _callee23$(_context23) {\n          while (1) {\n            switch (_context23.prev = _context23.next) {\n              case 0:\n                signed_transactions = [];\n                _iterator2 = _createForOfIteratorHelper(transactions);\n                _context23.prev = 2;\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context23.next = 12;\n                  break;\n                }\n\n                transaction = _step2.value;\n                _context23.next = 8;\n                return this.signTransaction(transaction);\n\n              case 8:\n                res = _context23.sent;\n                signed_transactions.push(res);\n\n              case 10:\n                _context23.next = 4;\n                break;\n\n              case 12:\n                _context23.next = 17;\n                break;\n\n              case 14:\n                _context23.prev = 14;\n                _context23.t0 = _context23[\"catch\"](2);\n\n                _iterator2.e(_context23.t0);\n\n              case 17:\n                _context23.prev = 17;\n\n                _iterator2.f();\n\n                return _context23.finish(17);\n\n              case 20:\n                return _context23.abrupt(\"return\", signed_transactions);\n\n              case 21:\n              case \"end\":\n                return _context23.stop();\n            }\n          }\n        }, _callee23, this, [[2, 14, 17, 20]]);\n      }));\n    }\n  }, {\n    key: \"signMessage\",\n    value: function signMessage(data) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee24() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee24$(_context24) {\n          while (1) {\n            switch (_context24.prev = _context24.next) {\n              case 0:\n                _context24.next = 2;\n                return this.provider.request({\n                  method: \"sign_message\",\n                  params: {\n                    data: data\n                  }\n                });\n\n              case 2:\n                response = _context24.sent;\n                return _context24.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context24.stop();\n            }\n          }\n        }, _callee24, this);\n      }));\n    }\n  }, {\n    key: \"getGaslessPublicKey\",\n    value: function getGaslessPublicKey() {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee25() {\n        var response;\n        return _regeneratorRuntime.wrap(function _callee25$(_context25) {\n          while (1) {\n            switch (_context25.prev = _context25.next) {\n              case 0:\n                _context25.next = 2;\n                return this.provider.request({\n                  method: \"get_gasless_public_key\",\n                  params: []\n                });\n\n              case 2:\n                response = _context25.sent;\n                return _context25.abrupt(\"return\", response);\n\n              case 4:\n              case \"end\":\n                return _context25.stop();\n            }\n          }\n        }, _callee25, this);\n      }));\n    }\n  }]);\n\n  return Torus;\n}();\n\nexport { BUTTON_POSITION, LOGIN_PROVIDER, PAYMENT_PROVIDER, TORUS_BUILD_ENV, TorusInPageProvider, Torus as default };","map":null,"metadata":{},"sourceType":"module"}