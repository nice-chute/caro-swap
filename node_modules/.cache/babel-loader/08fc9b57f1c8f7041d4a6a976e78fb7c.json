{"ast":null,"code":"import _slicedToArray from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _regeneratorRuntime from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _asyncToGenerator from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _wrapNativeSuper from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapNativeSuper\";\nimport _classCallCheck from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _assertThisInitialized from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/assertThisInitialized\";\nimport _inherits from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/inherits\";\nimport _possibleConstructorReturn from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/getPrototypeOf\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport _defineProperty from '@babel/runtime/helpers/defineProperty';\nimport { Duplex } from 'readable-stream';\nimport { randomId } from '@toruslabs/openlogin-utils';\nimport { EventEmitter } from 'events';\nimport stringify from 'fast-safe-stringify';\nimport eos from 'end-of-stream';\nimport once from 'once';\nimport pump from 'pump';\n\nfunction noop() {\n  return undefined;\n}\n\nvar SYN = \"SYN\";\nvar ACK = \"ACK\";\nvar BRK = \"BRK\";\n\nvar BasePostMessageStream = /*#__PURE__*/function (_Duplex) {\n  _inherits(BasePostMessageStream, _Duplex);\n\n  var _super = _createSuper(BasePostMessageStream);\n\n  function BasePostMessageStream(_ref) {\n    var _this;\n\n    _classCallCheck(this, BasePostMessageStream);\n\n    var name = _ref.name,\n        target = _ref.target,\n        _ref$targetWindow = _ref.targetWindow,\n        targetWindow = _ref$targetWindow === void 0 ? window : _ref$targetWindow,\n        _ref$targetOrigin = _ref.targetOrigin,\n        targetOrigin = _ref$targetOrigin === void 0 ? \"*\" : _ref$targetOrigin;\n    _this = _super.call(this, {\n      objectMode: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this), \"_init\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_haveSyn\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_name\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_target\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_targetWindow\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_targetOrigin\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_onMessage\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this), \"_synIntervalId\", void 0);\n\n    if (!name || !target) {\n      throw new Error(\"Invalid input.\");\n    }\n\n    _this._init = false;\n    _this._haveSyn = false;\n    _this._name = name;\n    _this._target = target; // target origin\n\n    _this._targetWindow = targetWindow;\n    _this._targetOrigin = targetOrigin;\n    _this._onMessage = _this.onMessage.bind(_assertThisInitialized(_this));\n    _this._synIntervalId = null;\n    window.addEventListener(\"message\", _this._onMessage, false);\n\n    _this._handShake();\n\n    return _this;\n  }\n\n  _createClass(BasePostMessageStream, [{\n    key: \"_break\",\n    value: function _break() {\n      this.cork();\n\n      this._write(BRK, null, noop);\n\n      this._haveSyn = false;\n      this._init = false;\n    }\n  }, {\n    key: \"_handShake\",\n    value: function _handShake() {\n      this._write(SYN, null, noop);\n\n      this.cork();\n    }\n  }, {\n    key: \"_onData\",\n    value: function _onData(data) {\n      if (!this._init) {\n        // listen for handshake\n        if (data === SYN) {\n          this._haveSyn = true;\n\n          this._write(ACK, null, noop);\n        } else if (data === ACK) {\n          this._init = true;\n\n          if (!this._haveSyn) {\n            this._write(ACK, null, noop);\n          }\n\n          this.uncork();\n        }\n      } else if (data === BRK) {\n        this._break();\n      } else {\n        // forward message\n        try {\n          this.push(data);\n        } catch (err) {\n          this.emit(\"error\", err);\n        }\n      }\n    }\n  }, {\n    key: \"_postMessage\",\n    value: function _postMessage(data) {\n      var originConstraint = this._targetOrigin;\n\n      this._targetWindow.postMessage({\n        target: this._target,\n        data: data\n      }, originConstraint);\n    }\n  }, {\n    key: \"onMessage\",\n    value: function onMessage(event) {\n      var message = event.data; // validate message\n\n      if (this._targetOrigin !== \"*\" && event.origin !== this._targetOrigin || event.source !== this._targetWindow || typeof message !== \"object\" || message.target !== this._name || !message.data) {\n        return;\n      }\n\n      this._onData(message.data);\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(data, _, cb) {\n      this._postMessage(data);\n\n      cb();\n    }\n  }, {\n    key: \"_destroy\",\n    value: function _destroy() {\n      window.removeEventListener(\"message\", this._onMessage, false);\n    }\n  }]);\n\n  return BasePostMessageStream;\n}(Duplex);\n\nfunction safeApply(handler, context, args) {\n  try {\n    Reflect.apply(handler, context, args);\n  } catch (err) {\n    // Throw error after timeout so as not to interrupt the stack\n    setTimeout(function () {\n      throw err;\n    });\n  }\n}\n\nfunction arrayClone(arr) {\n  var n = arr.length;\n  var copy = new Array(n);\n\n  for (var i = 0; i < n; i += 1) {\n    copy[i] = arr[i];\n  }\n\n  return copy;\n}\n\nvar SafeEventEmitter = /*#__PURE__*/function (_EventEmitter) {\n  _inherits(SafeEventEmitter, _EventEmitter);\n\n  var _super2 = _createSuper(SafeEventEmitter);\n\n  function SafeEventEmitter() {\n    _classCallCheck(this, SafeEventEmitter);\n\n    return _super2.apply(this, arguments);\n  }\n\n  _createClass(SafeEventEmitter, [{\n    key: \"emit\",\n    value: function emit(type) {\n      var doError = type === \"error\";\n      var events = this._events;\n\n      if (events !== undefined) {\n        doError = doError && events.error === undefined;\n      } else if (!doError) {\n        return false;\n      } // If there is no 'error' event listener then throw.\n\n\n      for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n        args[_key - 1] = arguments[_key];\n      }\n\n      if (doError) {\n        var er;\n\n        if (args.length > 0) {\n          er = args[0];\n        }\n\n        if (er instanceof Error) {\n          // Note: The comments on the `throw` lines are intentional, they show\n          // up in Node's output if this results in an unhandled exception.\n          throw er; // Unhandled 'error' event\n        } // At least give some kind of context to the user\n\n\n        var err = new Error(\"Unhandled error.\".concat(er ? \" (\".concat(er.message, \")\") : \"\"));\n        err.context = er;\n        throw err; // Unhandled 'error' event\n      }\n\n      var handler = events[type];\n\n      if (handler === undefined) {\n        return false;\n      }\n\n      if (typeof handler === \"function\") {\n        safeApply(handler, this, args);\n      } else {\n        var len = handler.length;\n        var listeners = arrayClone(handler);\n\n        for (var i = 0; i < len; i += 1) {\n          safeApply(listeners[i], this, args);\n        }\n      }\n\n      return true;\n    }\n  }]);\n\n  return SafeEventEmitter;\n}(EventEmitter);\n\nvar SerializableError = /*#__PURE__*/function (_Error) {\n  _inherits(SerializableError, _Error);\n\n  var _super3 = _createSuper(SerializableError);\n\n  function SerializableError(_ref) {\n    var _this2;\n\n    _classCallCheck(this, SerializableError);\n\n    var code = _ref.code,\n        message = _ref.message,\n        data = _ref.data;\n\n    if (!Number.isInteger(code)) {\n      throw new Error(\"code must be an integer\");\n    }\n\n    if (!message || typeof message !== \"string\") {\n      throw new Error(\"message must be string\");\n    }\n\n    _this2 = _super3.call(this, message);\n\n    _defineProperty(_assertThisInitialized(_this2), \"code\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this2), \"data\", void 0);\n\n    _this2.code = code;\n\n    if (data !== undefined) {\n      _this2.data = data;\n    }\n\n    return _this2;\n  }\n\n  _createClass(SerializableError, [{\n    key: \"toString\",\n    value: function toString() {\n      return stringify({\n        code: this.code,\n        message: this.message,\n        data: this.data,\n        stack: this.stack\n      });\n    }\n  }]);\n\n  return SerializableError;\n}( /*#__PURE__*/_wrapNativeSuper(Error));\n\nfunction serializeError(error) {\n  return error.toString();\n}\n\nvar getRpcPromiseCallback = function getRpcPromiseCallback(resolve, reject) {\n  var unwrapResult = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;\n  return function (error, response) {\n    if (error || response.error) {\n      reject(error || response.error);\n    } else if (!unwrapResult || Array.isArray(response)) {\n      resolve(response);\n    } else {\n      resolve(response.result);\n    }\n  };\n};\n\nfunction createErrorMiddleware(log) {\n  return function (req, res, next, end) {\n    try {\n      // json-rpc-engine will terminate the request when it notices this error\n      if (typeof req.method !== \"string\" || !req.method) {\n        res.error = new SerializableError({\n          code: -32603,\n          message: \"invalid method\"\n        });\n        end();\n        return;\n      }\n\n      next(function (done) {\n        var error = res.error;\n\n        if (!error) {\n          return done();\n        }\n\n        log.error(\"OpenLogin - RPC Error: \".concat(error.message), error);\n        return done();\n      });\n    } catch (error) {\n      log.error(\"OpenLogin - RPC Error thrown: \".concat(error.message), error);\n      res.error = new SerializableError({\n        code: -32603,\n        message: error.message\n      });\n      end();\n    }\n  };\n}\n\nfunction createStreamMiddleware() {\n  var idMap = {};\n\n  function readNoop() {\n    return false;\n  }\n\n  var events = new SafeEventEmitter();\n\n  function processResponse(res) {\n    var context = idMap[res.id];\n\n    if (!context) {\n      throw new Error(\"StreamMiddleware - Unknown response id \\\"\".concat(res.id, \"\\\"\"));\n    }\n\n    delete idMap[res.id]; // copy whole res onto original res\n\n    Object.assign(context.res, res); // run callback on empty stack,\n    // prevent internal stream-handler from catching errors\n\n    setTimeout(context.end);\n  }\n\n  function processNotification(res) {\n    events.emit(\"notification\", res);\n  }\n\n  function processMessage(res, _encoding, cb) {\n    var err;\n\n    try {\n      var isNotification = !res.id;\n\n      if (isNotification) {\n        processNotification(res);\n      } else {\n        processResponse(res);\n      }\n    } catch (_err) {\n      err = _err;\n    } // continue processing stream\n\n\n    cb(err);\n  }\n\n  var stream = new Duplex({\n    objectMode: true,\n    read: readNoop,\n    write: processMessage\n  });\n\n  var middleware = function middleware(req, res, next, end) {\n    // write req to stream\n    stream.push(req); // register request on id map\n\n    idMap[req.id] = {\n      req: req,\n      res: res,\n      next: next,\n      end: end\n    };\n  };\n\n  return {\n    events: events,\n    middleware: middleware,\n    stream: stream\n  };\n}\n\nfunction createScaffoldMiddleware(handlers) {\n  return function (req, res, next, end) {\n    var handler = handlers[req.method]; // if no handler, return\n\n    if (handler === undefined) {\n      return next();\n    } // if handler is fn, call as middleware\n\n\n    if (typeof handler === \"function\") {\n      return handler(req, res, next, end);\n    } // if handler is some other value, use as result\n\n\n    res.result = handler;\n    return end();\n  };\n}\n\nfunction createIdRemapMiddleware() {\n  return function (req, res, next, _end) {\n    var originalId = req.id;\n    var newId = randomId();\n    req.id = newId;\n    res.id = newId;\n    next(function (done) {\n      req.id = originalId;\n      res.id = originalId;\n      done();\n    });\n  };\n}\n\nfunction createLoggerMiddleware(logger) {\n  return function (req, res, next, _) {\n    logger.debug(\"REQ\", req, \"RES\", res);\n    next();\n  };\n}\n\nfunction createAsyncMiddleware(asyncMiddleware) {\n  return /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2(req, res, next, end) {\n      var resolveNextPromise, nextPromise, returnHandlerCallback, nextWasCalled, asyncNext;\n      return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              // nextPromise is the key to the implementation\n              // it is resolved by the return handler passed to the\n              // \"next\" function\n              nextPromise = new Promise(function (resolve) {\n                resolveNextPromise = resolve;\n              });\n              returnHandlerCallback = null;\n              nextWasCalled = false; // This will be called by the consumer's async middleware.\n\n              asyncNext = /*#__PURE__*/function () {\n                var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n                  return _regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          nextWasCalled = true; // We pass a return handler to next(). When it is called by the engine,\n                          // the consumer's async middleware will resume executing.\n\n                          next(function (runReturnHandlersCallback) {\n                            // This callback comes from JRPCEngine._runReturnHandlers\n                            returnHandlerCallback = runReturnHandlersCallback;\n                            resolveNextPromise();\n                          });\n                          _context.next = 4;\n                          return nextPromise;\n\n                        case 4:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee);\n                }));\n\n                return function asyncNext() {\n                  return _ref3.apply(this, arguments);\n                };\n              }();\n\n              _context2.prev = 4;\n              _context2.next = 7;\n              return asyncMiddleware(req, res, asyncNext);\n\n            case 7:\n              if (!nextWasCalled) {\n                _context2.next = 13;\n                break;\n              }\n\n              _context2.next = 10;\n              return nextPromise;\n\n            case 10:\n              // we must wait until the return handler is called\n              returnHandlerCallback(null);\n              _context2.next = 14;\n              break;\n\n            case 13:\n              end(null);\n\n            case 14:\n              _context2.next = 19;\n              break;\n\n            case 16:\n              _context2.prev = 16;\n              _context2.t0 = _context2[\"catch\"](4);\n\n              if (returnHandlerCallback) {\n                returnHandlerCallback(_context2.t0);\n              } else {\n                end(_context2.t0);\n              }\n\n            case 19:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, _callee2, null, [[4, 16]]);\n    }));\n\n    return function (_x, _x2, _x3, _x4) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n}\n\nfunction ownKeys$1(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread$1(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys$1(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys$1(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n/**\n * A JSON-RPC request and response processor.\n * Give it a stack of middleware, pass it requests, and get back responses.\n */\n\n\nvar JRPCEngine = /*#__PURE__*/function (_SafeEventEmitter) {\n  _inherits(JRPCEngine, _SafeEventEmitter);\n\n  var _super4 = _createSuper(JRPCEngine);\n\n  function JRPCEngine() {\n    var _this3;\n\n    _classCallCheck(this, JRPCEngine);\n\n    _this3 = _super4.call(this);\n\n    _defineProperty(_assertThisInitialized(_this3), \"_middleware\", void 0);\n\n    _this3._middleware = [];\n    return _this3;\n  }\n  /**\n   * Serially executes the given stack of middleware.\n   *\n   * @returns An array of any error encountered during middleware execution,\n   * a boolean indicating whether the request was completed, and an array of\n   * middleware-defined return handlers.\n   */\n\n\n  _createClass(JRPCEngine, [{\n    key: \"push\",\n    value:\n    /**\n     * Add a middleware function to the engine's middleware stack.\n     *\n     * @param middleware - The middleware function to add.\n     */\n    function push(middleware) {\n      this._middleware.push(middleware);\n    }\n  }, {\n    key: \"handle\",\n    value: function handle(req, cb) {\n      if (cb && typeof cb !== \"function\") {\n        throw new Error('\"callback\" must be a function if provided.');\n      }\n\n      if (Array.isArray(req)) {\n        if (cb) {\n          return this._handleBatch(req, cb);\n        }\n\n        return this._handleBatch(req);\n      }\n\n      if (cb) {\n        return this._handle(req, cb);\n      }\n\n      return this._promiseHandle(req);\n    }\n    /**\n     * Returns this engine as a middleware function that can be pushed to other\n     * engines.\n     *\n     * @returns This engine as a middleware function.\n     */\n\n  }, {\n    key: \"asMiddleware\",\n    value: function asMiddleware() {\n      var _this4 = this;\n\n      return /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(req, res, next, end) {\n          var _yield$JRPCEngine$_ru, _yield$JRPCEngine$_ru2, middlewareError, isComplete, returnHandlers;\n\n          return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n            while (1) {\n              switch (_context4.prev = _context4.next) {\n                case 0:\n                  _context4.prev = 0;\n                  _context4.next = 3;\n                  return JRPCEngine._runAllMiddleware(req, res, _this4._middleware);\n\n                case 3:\n                  _yield$JRPCEngine$_ru = _context4.sent;\n                  _yield$JRPCEngine$_ru2 = _slicedToArray(_yield$JRPCEngine$_ru, 3);\n                  middlewareError = _yield$JRPCEngine$_ru2[0];\n                  isComplete = _yield$JRPCEngine$_ru2[1];\n                  returnHandlers = _yield$JRPCEngine$_ru2[2];\n\n                  if (!isComplete) {\n                    _context4.next = 12;\n                    break;\n                  }\n\n                  _context4.next = 11;\n                  return JRPCEngine._runReturnHandlers(returnHandlers);\n\n                case 11:\n                  return _context4.abrupt(\"return\", end(middlewareError));\n\n                case 12:\n                  return _context4.abrupt(\"return\", next( /*#__PURE__*/function () {\n                    var _ref5 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3(handlerCallback) {\n                      return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n                        while (1) {\n                          switch (_context3.prev = _context3.next) {\n                            case 0:\n                              _context3.prev = 0;\n                              _context3.next = 3;\n                              return JRPCEngine._runReturnHandlers(returnHandlers);\n\n                            case 3:\n                              _context3.next = 8;\n                              break;\n\n                            case 5:\n                              _context3.prev = 5;\n                              _context3.t0 = _context3[\"catch\"](0);\n                              return _context3.abrupt(\"return\", handlerCallback(_context3.t0));\n\n                            case 8:\n                              return _context3.abrupt(\"return\", handlerCallback());\n\n                            case 9:\n                            case \"end\":\n                              return _context3.stop();\n                          }\n                        }\n                      }, _callee3, null, [[0, 5]]);\n                    }));\n\n                    return function (_x9) {\n                      return _ref5.apply(this, arguments);\n                    };\n                  }()));\n\n                case 15:\n                  _context4.prev = 15;\n                  _context4.t0 = _context4[\"catch\"](0);\n                  return _context4.abrupt(\"return\", end(_context4.t0));\n\n                case 18:\n                case \"end\":\n                  return _context4.stop();\n              }\n            }\n          }, _callee4, null, [[0, 15]]);\n        }));\n\n        return function (_x5, _x6, _x7, _x8) {\n          return _ref4.apply(this, arguments);\n        };\n      }();\n    }\n  }, {\n    key: \"_handleBatch\",\n    value: function () {\n      var _handleBatch2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5(reqs, cb) {\n        var responses;\n        return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                _context5.prev = 0;\n                _context5.next = 3;\n                return Promise.all( // 1. Begin executing each request in the order received\n                reqs.map(this._promiseHandle.bind(this)));\n\n              case 3:\n                responses = _context5.sent;\n\n                if (!cb) {\n                  _context5.next = 6;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", cb(null, responses));\n\n              case 6:\n                return _context5.abrupt(\"return\", responses);\n\n              case 9:\n                _context5.prev = 9;\n                _context5.t0 = _context5[\"catch\"](0);\n\n                if (!cb) {\n                  _context5.next = 13;\n                  break;\n                }\n\n                return _context5.abrupt(\"return\", cb(_context5.t0));\n\n              case 13:\n                throw _context5.t0;\n\n              case 14:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this, [[0, 9]]);\n      }));\n\n      function _handleBatch(_x10, _x11) {\n        return _handleBatch2.apply(this, arguments);\n      }\n\n      return _handleBatch;\n    }()\n    /**\n     * A promise-wrapped _handle.\n     */\n\n  }, {\n    key: \"_promiseHandle\",\n    value: function _promiseHandle(req) {\n      var _this5 = this;\n\n      return new Promise(function (resolve) {\n        _this5._handle(req, function (_err, res) {\n          // There will always be a response, and it will always have any error\n          // that is caught and propagated.\n          resolve(res);\n        });\n      });\n    }\n    /**\n     * Ensures that the request object is valid, processes it, and passes any\n     * error and the response object to the given callback.\n     *\n     * Does not reject.\n     */\n\n  }, {\n    key: \"_handle\",\n    value: function () {\n      var _handle2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee6(callerReq, cb) {\n        var _error2, _error3, req, res, error;\n\n        return _regeneratorRuntime.wrap(function _callee6$(_context6) {\n          while (1) {\n            switch (_context6.prev = _context6.next) {\n              case 0:\n                if (!(!callerReq || Array.isArray(callerReq) || typeof callerReq !== \"object\")) {\n                  _context6.next = 3;\n                  break;\n                }\n\n                _error2 = new SerializableError({\n                  code: -32603,\n                  message: \"request must be plain object\"\n                });\n                return _context6.abrupt(\"return\", cb(_error2, {\n                  id: undefined,\n                  jsonrpc: \"2.0\",\n                  error: _error2\n                }));\n\n              case 3:\n                if (!(typeof callerReq.method !== \"string\")) {\n                  _context6.next = 6;\n                  break;\n                }\n\n                _error3 = new SerializableError({\n                  code: -32603,\n                  message: \"method must be string\"\n                });\n                return _context6.abrupt(\"return\", cb(_error3, {\n                  id: callerReq.id,\n                  jsonrpc: \"2.0\",\n                  error: _error3\n                }));\n\n              case 6:\n                req = _objectSpread$1({}, callerReq);\n                res = {\n                  id: req.id,\n                  jsonrpc: req.jsonrpc\n                };\n                error = null;\n                _context6.prev = 9;\n                _context6.next = 12;\n                return this._processRequest(req, res);\n\n              case 12:\n                _context6.next = 17;\n                break;\n\n              case 14:\n                _context6.prev = 14;\n                _context6.t0 = _context6[\"catch\"](9);\n                // A request handler error, a re-thrown middleware error, or something\n                // unexpected.\n                error = _context6.t0;\n\n              case 17:\n                if (error) {\n                  // Ensure no result is present on an errored response\n                  delete res.result;\n\n                  if (!res.error) {\n                    res.error = serializeError(error);\n                  }\n                }\n\n                return _context6.abrupt(\"return\", cb(error, res));\n\n              case 19:\n              case \"end\":\n                return _context6.stop();\n            }\n          }\n        }, _callee6, this, [[9, 14]]);\n      }));\n\n      function _handle(_x12, _x13) {\n        return _handle2.apply(this, arguments);\n      }\n\n      return _handle;\n    }()\n    /**\n     * For the given request and response, runs all middleware and their return\n     * handlers, if any, and ensures that internal request processing semantics\n     * are satisfied.\n     */\n\n  }, {\n    key: \"_processRequest\",\n    value: function () {\n      var _processRequest2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee7(req, res) {\n        var _yield$JRPCEngine$_ru3, _yield$JRPCEngine$_ru4, error, isComplete, returnHandlers;\n\n        return _regeneratorRuntime.wrap(function _callee7$(_context7) {\n          while (1) {\n            switch (_context7.prev = _context7.next) {\n              case 0:\n                _context7.next = 2;\n                return JRPCEngine._runAllMiddleware(req, res, this._middleware);\n\n              case 2:\n                _yield$JRPCEngine$_ru3 = _context7.sent;\n                _yield$JRPCEngine$_ru4 = _slicedToArray(_yield$JRPCEngine$_ru3, 3);\n                error = _yield$JRPCEngine$_ru4[0];\n                isComplete = _yield$JRPCEngine$_ru4[1];\n                returnHandlers = _yield$JRPCEngine$_ru4[2];\n\n                // Throw if \"end\" was not called, or if the response has neither a result\n                // nor an error.\n                JRPCEngine._checkForCompletion(req, res, isComplete); // The return handlers should run even if an error was encountered during\n                // middleware processing.\n\n\n                _context7.next = 10;\n                return JRPCEngine._runReturnHandlers(returnHandlers);\n\n              case 10:\n                if (!error) {\n                  _context7.next = 12;\n                  break;\n                }\n\n                throw error;\n\n              case 12:\n              case \"end\":\n                return _context7.stop();\n            }\n          }\n        }, _callee7, this);\n      }));\n\n      function _processRequest(_x14, _x15) {\n        return _processRequest2.apply(this, arguments);\n      }\n\n      return _processRequest;\n    }()\n  }], [{\n    key: \"_runAllMiddleware\",\n    value: function () {\n      var _runAllMiddleware2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee8(req, res, middlewareStack) {\n        var returnHandlers, error, isComplete, _iterator, _step, middleware, _yield$JRPCEngine$_ru5, _yield$JRPCEngine$_ru6;\n\n        return _regeneratorRuntime.wrap(function _callee8$(_context8) {\n          while (1) {\n            switch (_context8.prev = _context8.next) {\n              case 0:\n                returnHandlers = [];\n                error = null;\n                isComplete = false; // Go down stack of middleware, call and collect optional returnHandlers\n\n                _iterator = _createForOfIteratorHelper(middlewareStack);\n                _context8.prev = 4;\n\n                _iterator.s();\n\n              case 6:\n                if ((_step = _iterator.n()).done) {\n                  _context8.next = 18;\n                  break;\n                }\n\n                middleware = _step.value;\n                _context8.next = 10;\n                return JRPCEngine._runMiddleware(req, res, middleware, returnHandlers);\n\n              case 10:\n                _yield$JRPCEngine$_ru5 = _context8.sent;\n                _yield$JRPCEngine$_ru6 = _slicedToArray(_yield$JRPCEngine$_ru5, 2);\n                error = _yield$JRPCEngine$_ru6[0];\n                isComplete = _yield$JRPCEngine$_ru6[1];\n\n                if (!isComplete) {\n                  _context8.next = 16;\n                  break;\n                }\n\n                return _context8.abrupt(\"break\", 18);\n\n              case 16:\n                _context8.next = 6;\n                break;\n\n              case 18:\n                _context8.next = 23;\n                break;\n\n              case 20:\n                _context8.prev = 20;\n                _context8.t0 = _context8[\"catch\"](4);\n\n                _iterator.e(_context8.t0);\n\n              case 23:\n                _context8.prev = 23;\n\n                _iterator.f();\n\n                return _context8.finish(23);\n\n              case 26:\n                return _context8.abrupt(\"return\", [error, isComplete, returnHandlers.reverse()]);\n\n              case 27:\n              case \"end\":\n                return _context8.stop();\n            }\n          }\n        }, _callee8, null, [[4, 20, 23, 26]]);\n      }));\n\n      function _runAllMiddleware(_x16, _x17, _x18) {\n        return _runAllMiddleware2.apply(this, arguments);\n      }\n\n      return _runAllMiddleware;\n    }()\n    /**\n     * Runs an individual middleware.\n     *\n     * @returns An array of any error encountered during middleware exection,\n     * and a boolean indicating whether the request should end.\n     */\n\n  }, {\n    key: \"_runMiddleware\",\n    value: function _runMiddleware(req, res, middleware, returnHandlers) {\n      return new Promise(function (resolve) {\n        var end = function end(err) {\n          var error = err || res.error;\n\n          if (error) {\n            res.error = serializeError(error);\n          } // True indicates that the request should end\n\n\n          resolve([error, true]);\n        };\n\n        var next = function next(returnHandler) {\n          if (res.error) {\n            end(res.error);\n          } else {\n            if (returnHandler) {\n              if (typeof returnHandler !== \"function\") {\n                end(new SerializableError({\n                  code: -32603,\n                  message: \"JRPCEngine: 'next' return handlers must be functions\"\n                }));\n              }\n\n              returnHandlers.push(returnHandler);\n            } // False indicates that the request should not end\n\n\n            resolve([null, false]);\n          }\n        };\n\n        try {\n          middleware(req, res, next, end);\n        } catch (error) {\n          end(error);\n        }\n      });\n    }\n    /**\n     * Serially executes array of return handlers. The request and response are\n     * assumed to be in their scope.\n     */\n\n  }, {\n    key: \"_runReturnHandlers\",\n    value: function () {\n      var _runReturnHandlers2 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee9(handlers) {\n        var _iterator2, _step2, _loop;\n\n        return _regeneratorRuntime.wrap(function _callee9$(_context10) {\n          while (1) {\n            switch (_context10.prev = _context10.next) {\n              case 0:\n                _iterator2 = _createForOfIteratorHelper(handlers);\n                _context10.prev = 1;\n                _loop = /*#__PURE__*/_regeneratorRuntime.mark(function _loop() {\n                  var handler;\n                  return _regeneratorRuntime.wrap(function _loop$(_context9) {\n                    while (1) {\n                      switch (_context9.prev = _context9.next) {\n                        case 0:\n                          handler = _step2.value;\n                          _context9.next = 3;\n                          return new Promise(function (resolve, reject) {\n                            handler(function (err) {\n                              return err ? reject(err) : resolve();\n                            });\n                          });\n\n                        case 3:\n                        case \"end\":\n                          return _context9.stop();\n                      }\n                    }\n                  }, _loop);\n                });\n\n                _iterator2.s();\n\n              case 4:\n                if ((_step2 = _iterator2.n()).done) {\n                  _context10.next = 8;\n                  break;\n                }\n\n                return _context10.delegateYield(_loop(), \"t0\", 6);\n\n              case 6:\n                _context10.next = 4;\n                break;\n\n              case 8:\n                _context10.next = 13;\n                break;\n\n              case 10:\n                _context10.prev = 10;\n                _context10.t1 = _context10[\"catch\"](1);\n\n                _iterator2.e(_context10.t1);\n\n              case 13:\n                _context10.prev = 13;\n\n                _iterator2.f();\n\n                return _context10.finish(13);\n\n              case 16:\n              case \"end\":\n                return _context10.stop();\n            }\n          }\n        }, _callee9, null, [[1, 10, 13, 16]]);\n      }));\n\n      function _runReturnHandlers(_x19) {\n        return _runReturnHandlers2.apply(this, arguments);\n      }\n\n      return _runReturnHandlers;\n    }()\n    /**\n     * Throws an error if the response has neither a result nor an error, or if\n     * the \"isComplete\" flag is falsy.\n     */\n\n  }, {\n    key: \"_checkForCompletion\",\n    value: function _checkForCompletion(req, res, isComplete) {\n      if (!(\"result\" in res) && !(\"error\" in res)) {\n        throw new SerializableError({\n          code: -32603,\n          message: \"Response has no error or result for request\"\n        });\n      }\n\n      if (!isComplete) {\n        throw new SerializableError({\n          code: -32603,\n          message: \"Nothing ended request\"\n        });\n      }\n    }\n  }]);\n\n  return JRPCEngine;\n}(SafeEventEmitter);\n\nfunction mergeMiddleware(middlewareStack) {\n  var engine = new JRPCEngine();\n  middlewareStack.forEach(function (middleware) {\n    return engine.push(middleware);\n  });\n  return engine.asMiddleware();\n}\n\nfunction createEngineStream(opts) {\n  if (!opts || !opts.engine) {\n    throw new Error(\"Missing engine parameter!\");\n  }\n\n  var engine = opts.engine; // eslint-disable-next-line prefer-const\n\n  var stream;\n\n  function read() {\n    return undefined;\n  }\n\n  function write(req, _encoding, cb) {\n    engine.handle(req, function (_err, res) {\n      stream.push(res);\n    });\n    cb();\n  }\n\n  stream = new Duplex({\n    objectMode: true,\n    read: read,\n    write: write\n  }); // forward notifications\n\n  if (engine.on) {\n    engine.on(\"notification\", function (message) {\n      stream.push(message);\n    });\n  }\n\n  return stream;\n}\n\nvar Substream = /*#__PURE__*/function (_Duplex2) {\n  _inherits(Substream, _Duplex2);\n\n  var _super5 = _createSuper(Substream);\n\n  function Substream(_ref) {\n    var _this6;\n\n    _classCallCheck(this, Substream);\n\n    var parent = _ref.parent,\n        name = _ref.name;\n    _this6 = _super5.call(this, {\n      objectMode: true\n    });\n\n    _defineProperty(_assertThisInitialized(_this6), \"_parent\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this6), \"_name\", void 0);\n\n    _this6._parent = parent;\n    _this6._name = name;\n    return _this6;\n  }\n  /**\n   * Explicitly sets read operations to a no-op.\n   */\n\n\n  _createClass(Substream, [{\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n    /**\n     * Called when data should be written to this writable stream.\n     *\n     * @param chunk - Arbitrary object to write\n     * @param encoding - Encoding to use when writing payload\n     * @param callback - Called when writing is complete or an error occurs\n     */\n\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      this._parent.push({\n        name: this._name,\n        data: chunk\n      });\n\n      callback();\n    }\n  }]);\n\n  return Substream;\n}(Duplex);\n\nfunction ownKeys(object, enumerableOnly) {\n  var keys = Object.keys(object);\n\n  if (Object.getOwnPropertySymbols) {\n    var symbols = Object.getOwnPropertySymbols(object);\n    enumerableOnly && (symbols = symbols.filter(function (sym) {\n      return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n    })), keys.push.apply(keys, symbols);\n  }\n\n  return keys;\n}\n\nfunction _objectSpread(target) {\n  for (var i = 1; i < arguments.length; i++) {\n    var source = null != arguments[i] ? arguments[i] : {};\n    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {\n      _defineProperty(target, key, source[key]);\n    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {\n      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n    });\n  }\n\n  return target;\n}\n\nvar IGNORE_SUBSTREAM = Symbol(\"IGNORE_SUBSTREAM\");\n\nvar ObjectMultiplex = /*#__PURE__*/function (_Duplex3) {\n  _inherits(ObjectMultiplex, _Duplex3);\n\n  var _super6 = _createSuper(ObjectMultiplex);\n\n  function ObjectMultiplex() {\n    var _this7;\n\n    _classCallCheck(this, ObjectMultiplex);\n\n    var opts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n    _this7 = _super6.call(this, _objectSpread(_objectSpread({}, opts), {}, {\n      objectMode: true\n    }));\n\n    _defineProperty(_assertThisInitialized(_this7), \"_substreams\", void 0);\n\n    _defineProperty(_assertThisInitialized(_this7), \"getStream\", void 0);\n\n    _this7._substreams = {};\n    return _this7;\n  }\n\n  _createClass(ObjectMultiplex, [{\n    key: \"createStream\",\n    value: function createStream(name) {\n      // validate name\n      if (!name) {\n        throw new Error(\"ObjectMultiplex - name must not be empty\");\n      }\n\n      if (this._substreams[name]) {\n        throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n      } // create substream\n\n\n      var substream = new Substream({\n        parent: this,\n        name: name\n      });\n      this._substreams[name] = substream; // listen for parent stream to end\n      // eslint-disable-next-line @typescript-eslint/no-use-before-define\n\n      anyStreamEnd(this, function (_error) {\n        return substream.destroy(_error || undefined);\n      });\n      return substream;\n    } // ignore streams (dont display orphaned data warning)\n\n  }, {\n    key: \"ignoreStream\",\n    value: function ignoreStream(name) {\n      // validate name\n      if (!name) {\n        throw new Error(\"ObjectMultiplex - name must not be empty\");\n      }\n\n      if (this._substreams[name]) {\n        throw new Error(\"ObjectMultiplex - Substream for name \\\"\".concat(name, \"\\\" already exists\"));\n      } // set\n\n\n      this._substreams[name] = IGNORE_SUBSTREAM;\n    }\n  }, {\n    key: \"_read\",\n    value: function _read() {\n      return undefined;\n    }\n  }, {\n    key: \"_write\",\n    value: function _write(chunk, _encoding, callback) {\n      var name = chunk.name,\n          data = chunk.data;\n\n      if (!name) {\n        window.console.warn(\"ObjectMultiplex - malformed chunk without name \\\"\".concat(chunk, \"\\\"\"));\n        return callback();\n      } // get corresponding substream\n\n\n      var substream = this._substreams[name];\n\n      if (!substream) {\n        window.console.warn(\"ObjectMultiplex - orphaned data for stream \\\"\".concat(name, \"\\\"\"));\n        return callback();\n      } // push data into substream\n\n\n      if (substream !== IGNORE_SUBSTREAM) {\n        substream.push(data);\n      }\n\n      return callback();\n    }\n  }]);\n\n  return ObjectMultiplex;\n}(Duplex); // util\n\n\nfunction anyStreamEnd(stream, _cb) {\n  var cb = once(_cb);\n  eos(stream, {\n    readable: false\n  }, cb);\n  eos(stream, {\n    writable: false\n  }, cb);\n}\n\nfunction setupMultiplex(stream) {\n  var mux = new ObjectMultiplex();\n\n  mux.getStream = function streamHelper(name) {\n    if (this._substreams[name]) {\n      return this._substreams[name];\n    }\n\n    return this.createStream(name);\n  };\n\n  pump(stream, mux, stream, function (err) {\n    if (err) window.console.error(err);\n  });\n  return mux;\n}\n\nvar PostMessageStream = /*#__PURE__*/function (_BasePostMessageStrea) {\n  _inherits(PostMessageStream, _BasePostMessageStrea);\n\n  var _super7 = _createSuper(PostMessageStream);\n\n  function PostMessageStream() {\n    _classCallCheck(this, PostMessageStream);\n\n    return _super7.apply(this, arguments);\n  }\n\n  _createClass(PostMessageStream, [{\n    key: \"_postMessage\",\n    value: function _postMessage(data) {\n      var originConstraint = this._targetOrigin;\n\n      if (typeof data === \"object\") {\n        var dataObj = data;\n\n        if (typeof dataObj.data === \"object\") {\n          var dataObjData = dataObj.data;\n\n          if (Array.isArray(dataObjData.params) && dataObjData.params.length > 0) {\n            var dataObjDataParam = dataObjData.params[0];\n\n            if (dataObjDataParam._origin) {\n              originConstraint = dataObjDataParam._origin;\n            } // add a constraint for the response\n\n\n            dataObjDataParam._origin = window.location.origin;\n          }\n        }\n      }\n\n      this._targetWindow.postMessage({\n        target: this._target,\n        data: data\n      }, originConstraint);\n    }\n  }]);\n\n  return PostMessageStream;\n}(BasePostMessageStream);\n\nexport { BasePostMessageStream, IGNORE_SUBSTREAM, JRPCEngine, ObjectMultiplex, PostMessageStream, SafeEventEmitter, SerializableError, Substream, createAsyncMiddleware, createEngineStream, createErrorMiddleware, createIdRemapMiddleware, createLoggerMiddleware, createScaffoldMiddleware, createStreamMiddleware, getRpcPromiseCallback, mergeMiddleware, serializeError, setupMultiplex };","map":null,"metadata":{},"sourceType":"module"}