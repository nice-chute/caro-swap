{"ast":null,"code":"import _regeneratorRuntime from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _toConsumableArray from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _classCallCheck from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\n/*! formdata-polyfill. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */\nimport C from 'fetch-blob';\nimport F from 'fetch-blob/file.js';\n\nvar t = Symbol.toStringTag,\n    i = Symbol.iterator,\n    h = Symbol.hasInstance,\n    r = Math.random,\n    m = 'append,set,get,getAll,delete,keys,values,entries,forEach,constructor'.split(','),\n    f = function f(a, b, c) {\n  return a += '', /^(Blob|File)$/.test(b && b[t]) ? [(c = c !== void 0 ? c + '' : b[t] == 'File' ? b.name : 'blob', a), b.name !== c || b[t] == 'blob' ? new F([b], c, b) : b] : [a, b + ''];\n},\n    e = function e(c, f) {\n  return (f ? c : c.replace(/\\r?\\n|\\r/g, '\\r\\n')).replace(/\\n/g, '%0A').replace(/\\r/g, '%0D').replace(/\"/g, '%22');\n},\n    x = function x(n, a, e) {\n  if (a.length < e) {\n    throw new TypeError(\"Failed to execute '\".concat(n, \"' on 'FormData': \").concat(e, \" arguments required, but only \").concat(a.length, \" present.\"));\n  }\n};\n\nexport var File = F;\n/** @type {typeof globalThis.FormData} */\n\nexport var FormData = /*#__PURE__*/function () {\n  function FormData() {\n    _classCallCheck(this, FormData);\n\n    if (arguments.length) throw new TypeError(\"Failed to construct 'FormData': parameter 1 is not of type 'HTMLFormElement'.\");\n  }\n\n  _createClass(FormData, [{\n    key: t,\n    get: function get() {\n      return 'FormData';\n    }\n  }, {\n    key: i,\n    value: function value() {\n      return this.entries();\n    }\n  }, {\n    key: \"append\",\n    value: function append() {\n      for (var _len = arguments.length, a = new Array(_len), _key = 0; _key < _len; _key++) {\n        a[_key] = arguments[_key];\n      }\n\n      x('append', arguments, 2);\n      this.#d.push(f.apply(void 0, a));\n    }\n  }, {\n    key: \"delete\",\n    value: function _delete(a) {\n      x('delete', arguments, 1);\n      a += '';\n      this.#d = this.#d.filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            b = _ref2[0];\n\n        return b !== a;\n      });\n    }\n  }, {\n    key: \"get\",\n    value: function get(a) {\n      x('get', arguments, 1);\n      a += '';\n\n      for (var b = this.#d, l = b.length, c = 0; c < l; c++) {\n        if (b[c][0] === a) return b[c][1];\n      }\n\n      return null;\n    }\n  }, {\n    key: \"getAll\",\n    value: function getAll(a, b) {\n      x('getAll', arguments, 1);\n      b = [];\n      a += '';\n      this.#d.forEach(function (c) {\n        return c[0] === a && b.push(c[1]);\n      });\n      return b;\n    }\n  }, {\n    key: \"has\",\n    value: function has(a) {\n      x('has', arguments, 1);\n      a += '';\n      return this.#d.some(function (b) {\n        return b[0] === a;\n      });\n    }\n  }, {\n    key: \"forEach\",\n    value: function forEach(a, b) {\n      x('forEach', arguments, 1);\n\n      var _iterator = _createForOfIteratorHelper(this),\n          _step;\n\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var _step$value = _slicedToArray(_step.value, 2),\n              c = _step$value[0],\n              d = _step$value[1];\n\n          a.call(b, d, c, this);\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n    }\n  }, {\n    key: \"set\",\n    value: function set() {\n      for (var _len2 = arguments.length, a = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        a[_key2] = arguments[_key2];\n      }\n\n      x('set', arguments, 2);\n      var b = [],\n          c = !0;\n      a = f.apply(void 0, _toConsumableArray(a));\n      this.#d.forEach(function (d) {\n        d[0] === a[0] ? c && (c = !b.push(a)) : b.push(d);\n      });\n      c && b.push(a);\n      this.#d = b;\n    }\n  }, {\n    key: \"entries\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function entries() {\n      return _regeneratorRuntime.wrap(function entries$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              return _context.delegateYield(this.#d, \"t0\", 1);\n\n            case 1:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, entries, this);\n    })\n  }, {\n    key: \"keys\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function keys() {\n      var _iterator2, _step2, _step2$value, a;\n\n      return _regeneratorRuntime.wrap(function keys$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _iterator2 = _createForOfIteratorHelper(this);\n              _context2.prev = 1;\n\n              _iterator2.s();\n\n            case 3:\n              if ((_step2 = _iterator2.n()).done) {\n                _context2.next = 9;\n                break;\n              }\n\n              _step2$value = _slicedToArray(_step2.value, 1), a = _step2$value[0];\n              _context2.next = 7;\n              return a;\n\n            case 7:\n              _context2.next = 3;\n              break;\n\n            case 9:\n              _context2.next = 14;\n              break;\n\n            case 11:\n              _context2.prev = 11;\n              _context2.t0 = _context2[\"catch\"](1);\n\n              _iterator2.e(_context2.t0);\n\n            case 14:\n              _context2.prev = 14;\n\n              _iterator2.f();\n\n              return _context2.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, keys, this, [[1, 11, 14, 17]]);\n    })\n  }, {\n    key: \"values\",\n    value: /*#__PURE__*/_regeneratorRuntime.mark(function values() {\n      var _iterator3, _step3, _step3$value, a;\n\n      return _regeneratorRuntime.wrap(function values$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _iterator3 = _createForOfIteratorHelper(this);\n              _context3.prev = 1;\n\n              _iterator3.s();\n\n            case 3:\n              if ((_step3 = _iterator3.n()).done) {\n                _context3.next = 9;\n                break;\n              }\n\n              _step3$value = _slicedToArray(_step3.value, 2), a = _step3$value[1];\n              _context3.next = 7;\n              return a;\n\n            case 7:\n              _context3.next = 3;\n              break;\n\n            case 9:\n              _context3.next = 14;\n              break;\n\n            case 11:\n              _context3.prev = 11;\n              _context3.t0 = _context3[\"catch\"](1);\n\n              _iterator3.e(_context3.t0);\n\n            case 14:\n              _context3.prev = 14;\n\n              _iterator3.f();\n\n              return _context3.finish(14);\n\n            case 17:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, values, this, [[1, 11, 14, 17]]);\n    })\n  }], [{\n    key: h,\n    value: function value(o) {\n      return o && typeof o === 'object' && o[t] === 'FormData' && !m.some(function (m) {\n        return typeof o[m] != 'function';\n      });\n    }\n  }]);\n\n  return FormData;\n}();\n/** @param {FormData} F */\n\nexport function formDataToBlob(F) {\n  var B = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : C;\n  var b = \"\".concat(r()).concat(r()).replace(/\\./g, '').slice(-28).padStart(32, '-'),\n      c = [],\n      p = \"--\".concat(b, \"\\r\\nContent-Disposition: form-data; name=\\\"\");\n  F.forEach(function (v, n) {\n    return typeof v == 'string' ? c.push(p + e(n) + \"\\\"\\r\\n\\r\\n\".concat(v.replace(/\\r(?!\\n)|(?<!\\r)\\n/g, '\\r\\n'), \"\\r\\n\")) : c.push(p + e(n) + \"\\\"; filename=\\\"\".concat(e(v.name, 1), \"\\\"\\r\\nContent-Type: \").concat(v.type || \"application/octet-stream\", \"\\r\\n\\r\\n\"), v, '\\r\\n');\n  });\n  c.push(\"--\".concat(b, \"--\"));\n  return new B(c, {\n    type: \"multipart/form-data; boundary=\" + b\n  });\n}","map":null,"metadata":{},"sourceType":"module"}