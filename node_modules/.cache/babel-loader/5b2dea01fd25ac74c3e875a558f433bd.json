{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _slicedToArray = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _asyncToGenerator = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/asyncToGenerator\");\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.associated = exports.findProgramAddressSync = exports.createProgramAddressSync = exports.createWithSeedSync = void 0;\n\nvar buffer_1 = require(\"buffer\");\n\nvar bn_js_1 = __importDefault(require(\"bn.js\"));\n\nvar js_sha256_1 = require(\"js-sha256\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar common_js_1 = require(\"../program/common.js\"); // Sync version of web3.PublicKey.createWithSeed.\n\n\nfunction createWithSeedSync(fromPublicKey, seed, programId) {\n  var buffer = buffer_1.Buffer.concat([fromPublicKey.toBuffer(), buffer_1.Buffer.from(seed), programId.toBuffer()]);\n  var hash = js_sha256_1.sha256.digest(buffer);\n  return new web3_js_1.PublicKey(buffer_1.Buffer.from(hash));\n}\n\nexports.createWithSeedSync = createWithSeedSync; // Sync version of web3.PublicKey.createProgramAddress.\n\nfunction createProgramAddressSync(seeds, programId) {\n  var MAX_SEED_LENGTH = 32;\n  var buffer = buffer_1.Buffer.alloc(0);\n  seeds.forEach(function (seed) {\n    if (seed.length > MAX_SEED_LENGTH) {\n      throw new TypeError(\"Max seed length exceeded\");\n    }\n\n    buffer = buffer_1.Buffer.concat([buffer, toBuffer(seed)]);\n  });\n  buffer = buffer_1.Buffer.concat([buffer, programId.toBuffer(), buffer_1.Buffer.from(\"ProgramDerivedAddress\")]);\n  var hash = (0, js_sha256_1.sha256)(new Uint8Array(buffer));\n  var publicKeyBytes = new bn_js_1.default(hash, 16).toArray(undefined, 32);\n\n  if (web3_js_1.PublicKey.isOnCurve(new Uint8Array(publicKeyBytes))) {\n    throw new Error(\"Invalid seeds, address must fall off the curve\");\n  }\n\n  return new web3_js_1.PublicKey(publicKeyBytes);\n}\n\nexports.createProgramAddressSync = createProgramAddressSync; // Sync version of web3.PublicKey.findProgramAddress.\n\nfunction findProgramAddressSync(seeds, programId) {\n  var nonce = 255;\n  var address;\n\n  while (nonce != 0) {\n    try {\n      var seedsWithNonce = seeds.concat(buffer_1.Buffer.from([nonce]));\n      address = createProgramAddressSync(seedsWithNonce, programId);\n    } catch (err) {\n      if (err instanceof TypeError) {\n        throw err;\n      }\n\n      nonce--;\n      continue;\n    }\n\n    return [address, nonce];\n  }\n\n  throw new Error(\"Unable to find a viable program address nonce\");\n}\n\nexports.findProgramAddressSync = findProgramAddressSync;\n\nvar toBuffer = function toBuffer(arr) {\n  if (arr instanceof buffer_1.Buffer) {\n    return arr;\n  } else if (arr instanceof Uint8Array) {\n    return buffer_1.Buffer.from(arr.buffer, arr.byteOffset, arr.byteLength);\n  } else {\n    return buffer_1.Buffer.from(arr);\n  }\n};\n\nfunction associated(_x) {\n  return _associated.apply(this, arguments);\n}\n\nfunction _associated() {\n  _associated = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(programId) {\n    var seeds,\n        _len,\n        args,\n        _key,\n        _yield$web3_js_1$Publ,\n        _yield$web3_js_1$Publ2,\n        assoc,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            seeds = [buffer_1.Buffer.from([97, 110, 99, 104, 111, 114])]; // b\"anchor\".\n\n            for (_len = _args.length, args = new Array(_len > 1 ? _len - 1 : 0), _key = 1; _key < _len; _key++) {\n              args[_key - 1] = _args[_key];\n            }\n\n            args.forEach(function (arg) {\n              seeds.push( // @ts-ignore\n              arg.buffer !== undefined ? arg : (0, common_js_1.translateAddress)(arg).toBuffer());\n            });\n            _context.next = 5;\n            return web3_js_1.PublicKey.findProgramAddress(seeds, (0, common_js_1.translateAddress)(programId));\n\n          case 5:\n            _yield$web3_js_1$Publ = _context.sent;\n            _yield$web3_js_1$Publ2 = _slicedToArray(_yield$web3_js_1$Publ, 1);\n            assoc = _yield$web3_js_1$Publ2[0];\n            return _context.abrupt(\"return\", assoc);\n\n          case 9:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n  return _associated.apply(this, arguments);\n}\n\nexports.associated = associated;","map":null,"metadata":{},"sourceType":"script"}