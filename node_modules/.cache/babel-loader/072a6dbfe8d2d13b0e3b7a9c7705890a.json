{"ast":null,"code":"import _regeneratorRuntime from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nimport { StatusCodes, TransportStatusError } from '@ledgerhq/hw-transport';\nimport { PublicKey } from '@solana/web3.js';\nexport function getDerivationPath(account, change) {\n  var length = account !== undefined ? change === undefined ? 3 : 4 : 2;\n  var derivationPath = Buffer.alloc(1 + length * 4);\n  var offset = derivationPath.writeUInt8(length, 0);\n  offset = derivationPath.writeUInt32BE(harden(44), offset); // Using BIP44\n\n  offset = derivationPath.writeUInt32BE(harden(501), offset); // Solana's BIP44 path\n\n  if (account !== undefined) {\n    offset = derivationPath.writeUInt32BE(harden(account), offset);\n\n    if (change !== undefined) {\n      derivationPath.writeUInt32BE(harden(change), offset);\n    }\n  }\n\n  return derivationPath;\n}\nvar BIP32_HARDENED_BIT = 1 << 31 >>> 0;\n\nfunction harden(n) {\n  return (n | BIP32_HARDENED_BIT) >>> 0;\n}\n\nvar INS_GET_PUBKEY = 0x05;\nvar INS_SIGN_MESSAGE = 0x06;\nvar P1_NON_CONFIRM = 0x00;\nvar P1_CONFIRM = 0x01;\nvar P2_EXTEND = 0x01;\nvar P2_MORE = 0x02;\nvar MAX_PAYLOAD = 255;\nvar LEDGER_CLA = 0xe0;\nexport function getPublicKey(transport, derivationPath) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var bytes;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return send(transport, INS_GET_PUBKEY, P1_NON_CONFIRM, derivationPath);\n\n          case 2:\n            bytes = _context.sent;\n            return _context.abrupt(\"return\", new PublicKey(bytes));\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n}\nexport function signTransaction(transport, transaction, derivationPath) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n    var paths, message, data;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            paths = Buffer.alloc(1);\n            paths.writeUInt8(1, 0);\n            message = transaction.serializeMessage();\n            data = Buffer.concat([paths, derivationPath, message]);\n            _context2.next = 6;\n            return send(transport, INS_SIGN_MESSAGE, P1_CONFIRM, data);\n\n          case 6:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 7:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2);\n  }));\n}\n\nfunction send(transport, instruction, p1, data) {\n  return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n    var p2, offset, _buffer, _response, buffer, response;\n\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            p2 = 0;\n            offset = 0;\n\n            if (!(data.length > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n\n          case 3:\n            if (!(data.length - offset > MAX_PAYLOAD)) {\n              _context3.next = 14;\n              break;\n            }\n\n            _buffer = data.slice(offset, offset + MAX_PAYLOAD);\n            _context3.next = 7;\n            return transport.send(LEDGER_CLA, instruction, p1, p2 | P2_MORE, _buffer);\n\n          case 7:\n            _response = _context3.sent;\n\n            if (!(_response.length !== 2)) {\n              _context3.next = 10;\n              break;\n            }\n\n            throw new TransportStatusError(StatusCodes.INCORRECT_DATA);\n\n          case 10:\n            p2 |= P2_EXTEND;\n            offset += MAX_PAYLOAD;\n            _context3.next = 3;\n            break;\n\n          case 14:\n            buffer = data.slice(offset);\n            _context3.next = 17;\n            return transport.send(LEDGER_CLA, instruction, p1, p2, buffer);\n\n          case 17:\n            response = _context3.sent;\n            return _context3.abrupt(\"return\", response.slice(0, response.length - 2));\n\n          case 19:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3);\n  }));\n}","map":null,"metadata":{},"sourceType":"module"}