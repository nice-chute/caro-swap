{"ast":null,"code":"import _asyncToGenerator from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/createClass\";\nimport _regeneratorRuntime from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";\nimport _wrapAsyncGenerator from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/wrapAsyncGenerator\";\nimport _awaitAsyncGenerator from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/awaitAsyncGenerator\";\nimport _asyncGeneratorDelegate from \"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncGeneratorDelegate\";\n\nfunction _createForOfIteratorHelper(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (!it) { if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; var F = function F() {}; return { s: F, n: function n() { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }, e: function e(_e) { throw _e; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var normalCompletion = true, didErr = false, err; return { s: function s() { it = it.call(o); }, n: function n() { var step = it.next(); normalCompletion = step.done; return step; }, e: function e(_e2) { didErr = true; err = _e2; }, f: function f() { try { if (!normalCompletion && it.return != null) it.return(); } finally { if (didErr) throw err; } } }; }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _asyncIterator(iterable) { var method, async, sync, retry = 2; for (\"undefined\" != typeof Symbol && (async = Symbol.asyncIterator, sync = Symbol.iterator); retry--;) { if (async && null != (method = iterable[async])) return method.call(iterable); if (sync && null != (method = iterable[sync])) return new AsyncFromSyncIterator(method.call(iterable)); async = \"@@asyncIterator\", sync = \"@@iterator\"; } throw new TypeError(\"Object is not async iterable\"); }\n\nfunction AsyncFromSyncIterator(s) { function AsyncFromSyncIteratorContinuation(r) { if (Object(r) !== r) return Promise.reject(new TypeError(r + \" is not an object.\")); var done = r.done; return Promise.resolve(r.value).then(function (value) { return { value: value, done: done }; }); } return AsyncFromSyncIterator = function AsyncFromSyncIterator(s) { this.s = s, this.n = s.next; }, AsyncFromSyncIterator.prototype = { s: null, n: null, next: function next() { return AsyncFromSyncIteratorContinuation(this.n.apply(this.s, arguments)); }, return: function _return(value) { var ret = this.s.return; return void 0 === ret ? Promise.resolve({ value: value, done: !0 }) : AsyncFromSyncIteratorContinuation(ret.apply(this.s, arguments)); }, throw: function _throw(value) { var thr = this.s.return; return void 0 === thr ? Promise.reject(value) : AsyncFromSyncIteratorContinuation(thr.apply(this.s, arguments)); } }, new AsyncFromSyncIterator(s); }\n\n/*! fetch-blob. MIT License. Jimmy WÃ¤rting <https://jimmy.warting.se/opensource> */\n// TODO (jimmywarting): in the feature use conditional loading with top level await (requires 14.x)\n// Node has recently added whatwg stream into core\nimport './streams.cjs'; // 64 KiB (same size chrome slice theirs blob into Uint8array's)\n\nvar POOL_SIZE = 65536;\n/** @param {(Blob | Uint8Array)[]} parts */\n\nfunction toIterator(_x) {\n  return _toIterator.apply(this, arguments);\n}\n\nfunction _toIterator() {\n  _toIterator = _wrapAsyncGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee(parts) {\n    var clone,\n        _iterator3,\n        _step3,\n        part,\n        position,\n        end,\n        size,\n        chunk,\n        _position,\n        b,\n        _chunk,\n        buffer,\n        _args = arguments;\n\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            clone = _args.length > 1 && _args[1] !== undefined ? _args[1] : true;\n            _iterator3 = _createForOfIteratorHelper(parts);\n            _context.prev = 2;\n\n            _iterator3.s();\n\n          case 4:\n            if ((_step3 = _iterator3.n()).done) {\n              _context.next = 41;\n              break;\n            }\n\n            part = _step3.value;\n\n            if (!('stream' in part)) {\n              _context.next = 10;\n              break;\n            }\n\n            return _context.delegateYield(_asyncGeneratorDelegate(_asyncIterator(\n            /** @type {AsyncIterableIterator<Uint8Array>} */\n            part.stream()), _awaitAsyncGenerator), \"t0\", 8);\n\n          case 8:\n            _context.next = 39;\n            break;\n\n          case 10:\n            if (!ArrayBuffer.isView(part)) {\n              _context.next = 28;\n              break;\n            }\n\n            if (!clone) {\n              _context.next = 24;\n              break;\n            }\n\n            position = part.byteOffset;\n            end = part.byteOffset + part.byteLength;\n\n          case 14:\n            if (!(position !== end)) {\n              _context.next = 22;\n              break;\n            }\n\n            size = Math.min(end - position, POOL_SIZE);\n            chunk = part.buffer.slice(position, position + size);\n            position += chunk.byteLength;\n            _context.next = 20;\n            return new Uint8Array(chunk);\n\n          case 20:\n            _context.next = 14;\n            break;\n\n          case 22:\n            _context.next = 26;\n            break;\n\n          case 24:\n            _context.next = 26;\n            return part;\n\n          case 26:\n            _context.next = 39;\n            break;\n\n          case 28:\n            // For blobs that have arrayBuffer but no stream method (nodes buffer.Blob)\n            _position = 0, b =\n            /** @type {Blob} */\n            part;\n\n          case 29:\n            if (!(_position !== b.size)) {\n              _context.next = 39;\n              break;\n            }\n\n            _chunk = b.slice(_position, Math.min(b.size, _position + POOL_SIZE));\n            _context.next = 33;\n            return _awaitAsyncGenerator(_chunk.arrayBuffer());\n\n          case 33:\n            buffer = _context.sent;\n            _position += buffer.byteLength;\n            _context.next = 37;\n            return new Uint8Array(buffer);\n\n          case 37:\n            _context.next = 29;\n            break;\n\n          case 39:\n            _context.next = 4;\n            break;\n\n          case 41:\n            _context.next = 46;\n            break;\n\n          case 43:\n            _context.prev = 43;\n            _context.t1 = _context[\"catch\"](2);\n\n            _iterator3.e(_context.t1);\n\n          case 46:\n            _context.prev = 46;\n\n            _iterator3.f();\n\n            return _context.finish(46);\n\n          case 49:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[2, 43, 46, 49]]);\n  }));\n  return _toIterator.apply(this, arguments);\n}\n\nvar _Blob = /*#__PURE__*/function (_Symbol$toStringTag, _Symbol$hasInstance) {\n  /**\n   * The Blob() constructor returns a new Blob object. The content\n   * of the blob consists of the concatenation of the values given\n   * in the parameter array.\n   *\n   * @param {*} blobParts\n   * @param {{ type?: string, endings?: string }} [options]\n   */\n  function Blob() {\n    var blobParts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    _classCallCheck(this, Blob);\n\n    if (typeof blobParts !== 'object' || blobParts === null) {\n      throw new TypeError('Failed to construct \\'Blob\\': The provided value cannot be converted to a sequence.');\n    }\n\n    if (typeof blobParts[Symbol.iterator] !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': The object must have a callable @@iterator property.');\n    }\n\n    if (typeof options !== 'object' && typeof options !== 'function') {\n      throw new TypeError('Failed to construct \\'Blob\\': parameter 2 cannot convert to dictionary.');\n    }\n\n    if (options === null) options = {};\n    var encoder = new TextEncoder();\n\n    var _iterator4 = _createForOfIteratorHelper(blobParts),\n        _step4;\n\n    try {\n      for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n        var element = _step4.value;\n        var part = void 0;\n\n        if (ArrayBuffer.isView(element)) {\n          part = new Uint8Array(element.buffer.slice(element.byteOffset, element.byteOffset + element.byteLength));\n        } else if (element instanceof ArrayBuffer) {\n          part = new Uint8Array(element.slice(0));\n        } else if (element instanceof Blob) {\n          part = element;\n        } else {\n          part = encoder.encode(\"\".concat(element));\n        }\n\n        this.#size += ArrayBuffer.isView(part) ? part.byteLength : part.size;\n        this.#parts.push(part);\n      }\n    } catch (err) {\n      _iterator4.e(err);\n    } finally {\n      _iterator4.f();\n    }\n\n    this.#endings = \"\".concat(options.endings === undefined ? 'transparent' : options.endings);\n    var type = options.type === undefined ? '' : String(options.type);\n    this.#type = /^[\\x20-\\x7E]*$/.test(type) ? type : '';\n  }\n  /**\n   * The Blob interface's size property returns the\n   * size of the Blob in bytes.\n   */\n\n\n  _createClass(Blob, [{\n    key: \"size\",\n    get: function get() {\n      return this.#size;\n    }\n    /**\n     * The type property of a Blob object returns the MIME type of the file.\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this.#type;\n    }\n    /**\n     * The text() method in the Blob interface returns a Promise\n     * that resolves with a string containing the contents of\n     * the blob, interpreted as UTF-8.\n     *\n     * @return {Promise<string>}\n     */\n\n  }, {\n    key: \"text\",\n    value: function () {\n      var _text = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var decoder, str, _iteratorAbruptCompletion, _didIteratorError, _iteratorError, _iterator, _step, part;\n\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                // More optimized than using this.arrayBuffer()\n                // that requires twice as much ram\n                decoder = new TextDecoder();\n                str = '';\n                _iteratorAbruptCompletion = false;\n                _didIteratorError = false;\n                _context2.prev = 4;\n                _iterator = _asyncIterator(toIterator(this.#parts, false));\n\n              case 6:\n                _context2.next = 8;\n                return _iterator.next();\n\n              case 8:\n                if (!(_iteratorAbruptCompletion = !(_step = _context2.sent).done)) {\n                  _context2.next = 14;\n                  break;\n                }\n\n                part = _step.value;\n                str += decoder.decode(part, {\n                  stream: true\n                });\n\n              case 11:\n                _iteratorAbruptCompletion = false;\n                _context2.next = 6;\n                break;\n\n              case 14:\n                _context2.next = 20;\n                break;\n\n              case 16:\n                _context2.prev = 16;\n                _context2.t0 = _context2[\"catch\"](4);\n                _didIteratorError = true;\n                _iteratorError = _context2.t0;\n\n              case 20:\n                _context2.prev = 20;\n                _context2.prev = 21;\n\n                if (!(_iteratorAbruptCompletion && _iterator.return != null)) {\n                  _context2.next = 25;\n                  break;\n                }\n\n                _context2.next = 25;\n                return _iterator.return();\n\n              case 25:\n                _context2.prev = 25;\n\n                if (!_didIteratorError) {\n                  _context2.next = 28;\n                  break;\n                }\n\n                throw _iteratorError;\n\n              case 28:\n                return _context2.finish(25);\n\n              case 29:\n                return _context2.finish(20);\n\n              case 30:\n                // Remaining\n                str += decoder.decode();\n                return _context2.abrupt(\"return\", str);\n\n              case 32:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[4, 16, 20, 30], [21,, 25, 29]]);\n      }));\n\n      function text() {\n        return _text.apply(this, arguments);\n      }\n\n      return text;\n    }()\n    /**\n     * The arrayBuffer() method in the Blob interface returns a\n     * Promise that resolves with the contents of the blob as\n     * binary data contained in an ArrayBuffer.\n     *\n     * @return {Promise<ArrayBuffer>}\n     */\n\n  }, {\n    key: \"arrayBuffer\",\n    value: function () {\n      var _arrayBuffer = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var data, offset, _iteratorAbruptCompletion2, _didIteratorError2, _iteratorError2, _iterator2, _step2, chunk;\n\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                // Easier way... Just a unnecessary overhead\n                // const view = new Uint8Array(this.size);\n                // await this.stream().getReader({mode: 'byob'}).read(view);\n                // return view.buffer;\n                data = new Uint8Array(this.size);\n                offset = 0;\n                _iteratorAbruptCompletion2 = false;\n                _didIteratorError2 = false;\n                _context3.prev = 4;\n                _iterator2 = _asyncIterator(toIterator(this.#parts, false));\n\n              case 6:\n                _context3.next = 8;\n                return _iterator2.next();\n\n              case 8:\n                if (!(_iteratorAbruptCompletion2 = !(_step2 = _context3.sent).done)) {\n                  _context3.next = 15;\n                  break;\n                }\n\n                chunk = _step2.value;\n                data.set(chunk, offset);\n                offset += chunk.length;\n\n              case 12:\n                _iteratorAbruptCompletion2 = false;\n                _context3.next = 6;\n                break;\n\n              case 15:\n                _context3.next = 21;\n                break;\n\n              case 17:\n                _context3.prev = 17;\n                _context3.t0 = _context3[\"catch\"](4);\n                _didIteratorError2 = true;\n                _iteratorError2 = _context3.t0;\n\n              case 21:\n                _context3.prev = 21;\n                _context3.prev = 22;\n\n                if (!(_iteratorAbruptCompletion2 && _iterator2.return != null)) {\n                  _context3.next = 26;\n                  break;\n                }\n\n                _context3.next = 26;\n                return _iterator2.return();\n\n              case 26:\n                _context3.prev = 26;\n\n                if (!_didIteratorError2) {\n                  _context3.next = 29;\n                  break;\n                }\n\n                throw _iteratorError2;\n\n              case 29:\n                return _context3.finish(26);\n\n              case 30:\n                return _context3.finish(21);\n\n              case 31:\n                return _context3.abrupt(\"return\", data.buffer);\n\n              case 32:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this, [[4, 17, 21, 31], [22,, 26, 30]]);\n      }));\n\n      function arrayBuffer() {\n        return _arrayBuffer.apply(this, arguments);\n      }\n\n      return arrayBuffer;\n    }()\n  }, {\n    key: \"stream\",\n    value: function stream() {\n      var it = toIterator(this.#parts, true);\n      return new globalThis.ReadableStream({\n        // @ts-ignore\n        type: 'bytes',\n        pull: function () {\n          var _pull = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee4(ctrl) {\n            var chunk;\n            return _regeneratorRuntime.wrap(function _callee4$(_context4) {\n              while (1) {\n                switch (_context4.prev = _context4.next) {\n                  case 0:\n                    _context4.next = 2;\n                    return it.next();\n\n                  case 2:\n                    chunk = _context4.sent;\n                    chunk.done ? ctrl.close() : ctrl.enqueue(chunk.value);\n\n                  case 4:\n                  case \"end\":\n                    return _context4.stop();\n                }\n              }\n            }, _callee4);\n          }));\n\n          function pull(_x2) {\n            return _pull.apply(this, arguments);\n          }\n\n          return pull;\n        }(),\n        cancel: function () {\n          var _cancel = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee5() {\n            return _regeneratorRuntime.wrap(function _callee5$(_context5) {\n              while (1) {\n                switch (_context5.prev = _context5.next) {\n                  case 0:\n                    _context5.next = 2;\n                    return it.return();\n\n                  case 2:\n                  case \"end\":\n                    return _context5.stop();\n                }\n              }\n            }, _callee5);\n          }));\n\n          function cancel() {\n            return _cancel.apply(this, arguments);\n          }\n\n          return cancel;\n        }()\n      });\n    }\n    /**\n     * The Blob interface's slice() method creates and returns a\n     * new Blob object which contains data from a subset of the\n     * blob on which it's called.\n     *\n     * @param {number} [start]\n     * @param {number} [end]\n     * @param {string} [type]\n     */\n\n  }, {\n    key: \"slice\",\n    value: function slice() {\n      var start = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 0;\n      var end = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : this.size;\n      var type = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : '';\n      var size = this.size;\n      var relativeStart = start < 0 ? Math.max(size + start, 0) : Math.min(start, size);\n      var relativeEnd = end < 0 ? Math.max(size + end, 0) : Math.min(end, size);\n      var span = Math.max(relativeEnd - relativeStart, 0);\n      var parts = this.#parts;\n      var blobParts = [];\n      var added = 0;\n\n      var _iterator5 = _createForOfIteratorHelper(parts),\n          _step5;\n\n      try {\n        for (_iterator5.s(); !(_step5 = _iterator5.n()).done;) {\n          var part = _step5.value;\n\n          // don't add the overflow to new blobParts\n          if (added >= span) {\n            break;\n          }\n\n          var _size = ArrayBuffer.isView(part) ? part.byteLength : part.size;\n\n          if (relativeStart && _size <= relativeStart) {\n            // Skip the beginning and change the relative\n            // start & end position as we skip the unwanted parts\n            relativeStart -= _size;\n            relativeEnd -= _size;\n          } else {\n            var chunk = void 0;\n\n            if (ArrayBuffer.isView(part)) {\n              chunk = part.subarray(relativeStart, Math.min(_size, relativeEnd));\n              added += chunk.byteLength;\n            } else {\n              chunk = part.slice(relativeStart, Math.min(_size, relativeEnd));\n              added += chunk.size;\n            }\n\n            relativeEnd -= _size;\n            blobParts.push(chunk);\n            relativeStart = 0; // All next sequential parts should start at 0\n          }\n        }\n      } catch (err) {\n        _iterator5.e(err);\n      } finally {\n        _iterator5.f();\n      }\n\n      var blob = new Blob([], {\n        type: String(type).toLowerCase()\n      });\n      blob.#size = span;\n      blob.#parts = blobParts;\n      return blob;\n    }\n  }, {\n    key: _Symbol$toStringTag,\n    get: function get() {\n      return 'Blob';\n    }\n  }], [{\n    key: _Symbol$hasInstance,\n    value: function value(object) {\n      return object && typeof object === 'object' && typeof object.constructor === 'function' && (typeof object.stream === 'function' || typeof object.arrayBuffer === 'function') && /^(Blob|File)$/.test(object[Symbol.toStringTag]);\n    }\n  }]);\n\n  return Blob;\n}(Symbol.toStringTag, Symbol.hasInstance);\n\nObject.defineProperties(_Blob.prototype, {\n  size: {\n    enumerable: true\n  },\n  type: {\n    enumerable: true\n  },\n  slice: {\n    enumerable: true\n  }\n});\n/** @type {typeof globalThis.Blob} */\n\nexport var Blob = _Blob;\nexport default Blob;","map":null,"metadata":{},"sourceType":"module"}