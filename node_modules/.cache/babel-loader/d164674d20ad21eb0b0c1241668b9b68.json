{"ast":null,"code":"\"use strict\";\n\nvar _regeneratorRuntime = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\");\n\nvar _classCallCheck = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Program = void 0;\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar accounts_1 = require(\"./accounts\");\n\nvar buffer_1 = require(\"buffer\");\n\nvar Program = /*#__PURE__*/function () {\n  function Program() {\n    _classCallCheck(this, Program);\n  }\n\n  _createClass(Program, null, [{\n    key: \"findProgramAddress\",\n    value: function findProgramAddress(seeds) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return web3_js_1.PublicKey.findProgramAddress(seeds, this.PUBKEY);\n\n              case 2:\n                return _context.abrupt(\"return\", _context.sent[0]);\n\n              case 3:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n    }\n  }, {\n    key: \"getProgramAccounts\",\n    value: function getProgramAccounts(connection, configOrCommitment) {\n      return __awaiter(this, void 0, void 0, /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        var extra, commitment, args, unsafeRes;\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                extra = {};\n\n                if (configOrCommitment) {\n                  if (typeof configOrCommitment === 'string') {\n                    commitment = configOrCommitment;\n                  } else {\n                    commitment = configOrCommitment.commitment;\n\n                    if (configOrCommitment.dataSlice) {\n                      extra.dataSlice = configOrCommitment.dataSlice;\n                    }\n\n                    if (configOrCommitment.filters) {\n                      extra.filters = configOrCommitment.filters;\n                    }\n                  }\n                }\n\n                args = connection._buildArgs([this.PUBKEY.toBase58()], commitment, 'base64', extra);\n                _context2.next = 5;\n                return connection._rpcRequest('getProgramAccounts', args);\n\n              case 5:\n                unsafeRes = _context2.sent;\n                return _context2.abrupt(\"return\", unsafeRes.result.map(function (_ref) {\n                  var _ref$account = _ref.account,\n                      data = _ref$account.data,\n                      executable = _ref$account.executable,\n                      lamports = _ref$account.lamports,\n                      owner = _ref$account.owner,\n                      pubkey = _ref.pubkey;\n                  return {\n                    account: {\n                      data: buffer_1.Buffer.from(data[0], 'base64'),\n                      executable: executable,\n                      lamports: lamports,\n                      owner: new web3_js_1.PublicKey(owner)\n                    },\n                    pubkey: new web3_js_1.PublicKey(pubkey)\n                  };\n                }).map(function (_ref2) {\n                  var pubkey = _ref2.pubkey,\n                      account = _ref2.account;\n                  return new accounts_1.Account(pubkey, account);\n                }));\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this);\n      }));\n    }\n  }]);\n\n  return Program;\n}();\n\nexports.Program = Program;","map":null,"metadata":{},"sourceType":"script"}