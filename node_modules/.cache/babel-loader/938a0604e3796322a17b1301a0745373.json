{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _possibleConstructorReturn = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/daniel/dev/caroline-swap/app/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/inherits\");\n\nvar _a;\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.ClaimBid = exports.ClaimBidArgs = void 0;\n\nvar mpl_core_1 = require(\"@metaplex-foundation/mpl-core\");\n\nvar mpl_auction_1 = require(\"@metaplex-foundation/mpl-auction\");\n\nvar spl_token_1 = require(\"@solana/spl-token\");\n\nvar web3_js_1 = require(\"@solana/web3.js\");\n\nvar MetaplexProgram_1 = require(\"../MetaplexProgram\");\n\nvar ClaimBidArgs = /*#__PURE__*/function (_mpl_core_1$Borsh$Dat) {\n  _inherits(ClaimBidArgs, _mpl_core_1$Borsh$Dat);\n\n  function ClaimBidArgs() {\n    var _this;\n\n    _classCallCheck(this, ClaimBidArgs);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(ClaimBidArgs).apply(this, arguments));\n    _this.instruction = 6;\n    return _this;\n  }\n\n  return ClaimBidArgs;\n}(mpl_core_1.Borsh.Data);\n\nexports.ClaimBidArgs = ClaimBidArgs;\n_a = ClaimBidArgs;\nClaimBidArgs.SCHEMA = _a.struct([['instruction', 'u8']]);\n\nvar ClaimBid = /*#__PURE__*/function (_mpl_core_1$Transacti) {\n  _inherits(ClaimBid, _mpl_core_1$Transacti);\n\n  function ClaimBid(options, params) {\n    var _this2;\n\n    _classCallCheck(this, ClaimBid);\n\n    _this2 = _possibleConstructorReturn(this, _getPrototypeOf(ClaimBid).call(this, options));\n    var store = params.store,\n        vault = params.vault,\n        auction = params.auction,\n        auctionExtended = params.auctionExtended,\n        auctionManager = params.auctionManager,\n        bidder = params.bidder,\n        bidderPot = params.bidderPot,\n        bidderPotToken = params.bidderPotToken,\n        acceptPayment = params.acceptPayment,\n        tokenMint = params.tokenMint;\n    var data = ClaimBidArgs.serialize();\n\n    _this2.add(new web3_js_1.TransactionInstruction({\n      keys: [{\n        pubkey: acceptPayment,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: bidderPotToken,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: bidderPot,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: auctionManager,\n        isSigner: false,\n        isWritable: true\n      }, {\n        pubkey: auction,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: bidder,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: tokenMint,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: vault,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: store,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: mpl_auction_1.AuctionProgram.PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: web3_js_1.SYSVAR_CLOCK_PUBKEY,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: spl_token_1.TOKEN_PROGRAM_ID,\n        isSigner: false,\n        isWritable: false\n      }, {\n        pubkey: auctionExtended,\n        isSigner: false,\n        isWritable: false\n      }],\n      programId: MetaplexProgram_1.MetaplexProgram.PUBKEY,\n      data: data\n    }));\n\n    return _this2;\n  }\n\n  return ClaimBid;\n}(mpl_core_1.Transaction);\n\nexports.ClaimBid = ClaimBid;","map":null,"metadata":{},"sourceType":"script"}